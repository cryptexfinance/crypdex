{
  "address": "0x619220Ba1815CC88ea267f3d14cA463D6d1ECBfe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pythContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_priceId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "priceId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "read",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf7846857a2ed84ad6f68c38f5b4549043e83758fecd2663e0c8d730f50b4efb9",
  "receipt": {
    "to": null,
    "from": "0xf8Bd793A7c9cB86e827C084D49f343F1296a8247",
    "contractAddress": "0x619220Ba1815CC88ea267f3d14cA463D6d1ECBfe",
    "transactionIndex": 2,
    "gasUsed": "383126",
    "logsBloom": "0x
    "blockHash": "0x37cf9f6a3d38f27d38376669af2b03755eb8573c6eae54d3e7600b942f30950f",
    "transactionHash": "0xf7846857a2ed84ad6f68c38f5b4549043e83758fecd2663e0c8d730f50b4efb9",
    "logs": [],
    "blockNumber": 315690123,
    "cumulativeGasUsed": "443642",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xff1a0f4744e8582DF1aE09D5611b887B6a12925C",
    "0x2b9ab1e972a281585084148ba1389800799bd4be63b957507db1349314e47445"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d8c455263a2e71c39bfa2baf7e2a628",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pythContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"priceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"read\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/PythOracle.sol\":\"PythOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/oracles/PythOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\n\\n\\ncontract PythOracle {\\n    IPyth public pyth;\\n    bytes32 public priceId;\\n\\n    constructor(address pythContract, bytes32 _priceId) {\\n        pyth = IPyth(pythContract);\\n        priceId = _priceId;\\n    }\\n\\n    function read() external view returns (uint256 price){\\n        PythStructs.Price memory pythPrice = pyth.getPrice(priceId);\\n        price = (uint(uint64(pythPrice.price)) * (10 ** 18)) / (10 ** uint8(uint32(-1 * pythPrice.expo)));\\n    }\\n}\\n\",\"keccak256\":\"0xd36874c32e333ebe1af7e43c559735027331390b659c1cc498cede8fc9f84fa8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5060405161045c38038061045c833981016040819052602c916054565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155608c565b60008060408385031215606657600080fd5b82516001600160a01b0381168114607c57600080fd5b6020939093015192949293505050565b6103c18061009b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063311893341461004657806357de26a414610062578063f98d06f01461006a575b600080fd5b61004f60015481565b6040519081526020015b60405180910390f35b61004f610095565b60005461007d906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b600080546001546040516331d98b3f60e01b8152600481019190915282916001600160a01b0316906331d98b3f90602401608060405180830381865afa1580156100e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101079190610183565b9050806040015160001961011b919061022c565b61012690600a61033c565b81516101449067ffffffffffffffff16670de0b6b3a7640000610352565b61014e9190610369565b91505090565b805167ffffffffffffffff8116811461016c57600080fd5b919050565b8051600381900b811461016c57600080fd5b6000608082840312801561019657600080fd5b600090506040516080810181811067ffffffffffffffff821117156101c957634e487b7160e01b83526041600452602483fd5b6040528351600781900b81146101dd578283fd5b81526101eb60208501610154565b60208201526101fc60408501610171565b604082015260609384015193810193909352509092915050565b634e487b7160e01b600052601160045260246000fd5b60008260030b8260030b028060030b915080821461024c5761024c610216565b5092915050565b6001815b600184111561028e5780850481111561027257610272610216565b600184161561028057908102905b60019390931c928002610257565b935093915050565b6000826102a557506001610336565b816102b257506000610336565b81600181146102c857600281146102d2576102ee565b6001915050610336565b60ff8411156102e3576102e3610216565b50506001821b610336565b5060208310610133831016604e8410600b8410161715610311575081810a610336565b61031e6000198484610253565b806000190482111561033257610332610216565b0290505b92915050565b600061034b60ff841683610296565b9392505050565b808202811582820484141761033657610336610216565b60008261038657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220843546abc6c21ae86f3a0a7387227bcc1eb821dd796826b3bfa7ea90431c8f4564736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063311893341461004657806357de26a414610062578063f98d06f01461006a575b600080fd5b61004f60015481565b6040519081526020015b60405180910390f35b61004f610095565b60005461007d906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b600080546001546040516331d98b3f60e01b8152600481019190915282916001600160a01b0316906331d98b3f90602401608060405180830381865afa1580156100e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101079190610183565b9050806040015160001961011b919061022c565b61012690600a61033c565b81516101449067ffffffffffffffff16670de0b6b3a7640000610352565b61014e9190610369565b91505090565b805167ffffffffffffffff8116811461016c57600080fd5b919050565b8051600381900b811461016c57600080fd5b6000608082840312801561019657600080fd5b600090506040516080810181811067ffffffffffffffff821117156101c957634e487b7160e01b83526041600452602483fd5b6040528351600781900b81146101dd578283fd5b81526101eb60208501610154565b60208201526101fc60408501610171565b604082015260609384015193810193909352509092915050565b634e487b7160e01b600052601160045260246000fd5b60008260030b8260030b028060030b915080821461024c5761024c610216565b5092915050565b6001815b600184111561028e5780850481111561027257610272610216565b600184161561028057908102905b60019390931c928002610257565b935093915050565b6000826102a557506001610336565b816102b257506000610336565b81600181146102c857600281146102d2576102ee565b6001915050610336565b60ff8411156102e3576102e3610216565b50506001821b610336565b5060208310610133831016604e8410600b8410161715610311575081810a610336565b61031e6000198484610253565b806000190482111561033257610332610216565b0290505b92915050565b600061034b60ff841683610296565b9392505050565b808202811582820484141761033657610336610216565b60008261038657634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220843546abc6c21ae86f3a0a7387227bcc1eb821dd796826b3bfa7ea90431c8f4564736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5727,
        "contract": "contracts/oracles/PythOracle.sol:PythOracle",
        "label": "pyth",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPyth)3630"
      },
      {
        "astId": 5729,
        "contract": "contracts/oracles/PythOracle.sol:PythOracle",
        "label": "priceId",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPyth)3630": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      }
    }
  }
}