{
  "address": "0x2C76EE12D8A0De267bAc7F6f458f354F5994d707",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHNotAccepted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExchangeCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExchangeLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IssuanceAddressCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayloadLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuantityBoughtLessThanMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuoteAmountCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceivedAmountLessThanExpected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetAddressCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetQuantityCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetTokenNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TargetAddressCannotBeZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "FunctionRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "FunctionWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuanceModule",
          "type": "address"
        }
      ],
      "name": "IssuanceModuleAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "issuanceModule",
          "type": "address"
        }
      ],
      "name": "IssuanceModuleRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "setToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuanceModule",
          "type": "address"
        }
      ],
      "name": "addSetTokenIssuanceModules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "setTokenQuantity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalQuoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "exchanges",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "exchangePayloads",
          "type": "bytes[]"
        }
      ],
      "name": "buyComponentsAndIssueSetToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extraQuoteBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "setTokenQuantity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minQuoteAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "exchanges",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "exchangePayloads",
          "type": "bytes[]"
        }
      ],
      "name": "redeemSetTokenAndExchangeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAssetBalanceAfterSell",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "setToken",
          "type": "address"
        }
      ],
      "name": "removeSetTokenIssuanceModules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "name": "revokeWhitelistedFunctions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "setTokenIssuanceModules",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "name": "whitelistFunctions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes24",
          "name": "",
          "type": "bytes24"
        }
      ],
      "name": "whitelistedFunctions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf98c281c63f0e53408de00b1a09ae6a75df0f584620d214c28c50f7e574dde71",
  "receipt": {
    "to": null,
    "from": "0xf8Bd793A7c9cB86e827C084D49f343F1296a8247",
    "contractAddress": "0x2C76EE12D8A0De267bAc7F6f458f354F5994d707",
    "transactionIndex": 28,
    "gasUsed": "1595653",
    "logsBloom": "0x
    "blockHash": "0x4ff637c920e89962b6c5eebbaf3b11239e3df49ad4ffd03b05b5dd41c4e82dd3",
    "transactionHash": "0xf98c281c63f0e53408de00b1a09ae6a75df0f584620d214c28c50f7e574dde71",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 311543306,
        "transactionHash": "0xf98c281c63f0e53408de00b1a09ae6a75df0f584620d214c28c50f7e574dde71",
        "address": "0x2C76EE12D8A0De267bAc7F6f458f354F5994d707",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8bd793a7c9cb86e827c084d49f343f1296a8247"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x4ff637c920e89962b6c5eebbaf3b11239e3df49ad4ffd03b05b5dd41c4e82dd3"
      }
    ],
    "blockNumber": 311543306,
    "cumulativeGasUsed": "4583700",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf8Bd793A7c9cB86e827C084D49f343F1296a8247"
  ],
  "numDeployments": 1,
  "solcInputHash": "9d8c455263a2e71c39bfa2baf7e2a628",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IssuanceAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayloadLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuantityBoughtLessThanMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteAmountCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceivedAmountLessThanExpected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetAddressCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetQuantityCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetTokenNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetAddressCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"FunctionRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"FunctionWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuanceModule\",\"type\":\"address\"}],\"name\":\"IssuanceModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"issuanceModule\",\"type\":\"address\"}],\"name\":\"IssuanceModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuanceModule\",\"type\":\"address\"}],\"name\":\"addSetTokenIssuanceModules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"setTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalQuoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"exchanges\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"exchangePayloads\",\"type\":\"bytes[]\"}],\"name\":\"buyComponentsAndIssueSetToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraQuoteBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"setTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"exchanges\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"exchangePayloads\",\"type\":\"bytes[]\"}],\"name\":\"redeemSetTokenAndExchangeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAssetBalanceAfterSell\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"removeSetTokenIssuanceModules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"name\":\"revokeWhitelistedFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"setTokenIssuanceModules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"name\":\"whitelistFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes24\",\"name\":\"\",\"type\":\"bytes24\"}],\"name\":\"whitelistedFunctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Cryptex Finance\",\"details\":\"Note: - This is a peripheral contract that helps users buy the underlying components   of the SetTokens and then issues the SetToken to the user.   It also allows users to redeem their SetTokens for a single asset. - For buying and selling, exchanges like Paraswap or Uniswap will be used,   and the payload should be constructed by an interface, such as a UI.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"FunctionRevoked(address,bytes4)\":{\"params\":{\"selector\":\"The 4 byte function selector that has been revoked.\",\"target\":\"The address of the target contract.\"}},\"FunctionWhitelisted(address,bytes4)\":{\"params\":{\"selector\":\"The 4 byte function selector that has been whitelisted.\",\"target\":\"The address of the target contract.\"}},\"IssuanceModuleAdded(address,address)\":{\"params\":{\"issuanceModule\":\"The address of the IssuanceModule that was added.\",\"setToken\":\"The address of the SetToken.\"}},\"IssuanceModuleRemoved(address,address)\":{\"params\":{\"issuanceModule\":\"The address of the IssuanceModule that was removed.\",\"setToken\":\"The address of the SetToken.\"}}},\"kind\":\"dev\",\"methods\":{\"addSetTokenIssuanceModules(address,address)\":{\"details\":\"This function maps a SetToken address to its corresponding issuance module. Both addresses must be non-zero.\",\"params\":{\"issuanceModule\":\": The address of the issuance module to be associated with the SetToken.\",\"setToken\":\": The address of the SetToken for which the issuance module is being set.\"}},\"approveTokens(address[],address,uint256)\":{\"details\":\"Only the owner can call this function\",\"params\":{\"amount\":\": The amount of each token to approve for the spender.\",\"spender\":\": The address that is being approved to spend the tokens.\",\"tokens\":\": An array of ERC20 token instances to approve.\"}},\"buyComponentsAndIssueSetToken(address,uint256,address,uint256,address[],bytes[])\":{\"details\":\"To buy the underlying components, the payload needs to be constructed for the whitelisted exchanges.\",\"params\":{\"exchangePayloads\":\": Payloads targeted towards each exchange for buying the corresponding component.\",\"exchanges\":\": An array of addresses used to buy each component.\",\"quoteAsset\":\": The instance of the IERC20 token used for buying the underlying components.\",\"setToken\":\": The instance of the SetToken contract.\",\"setTokenQuantity\":\": The quantity of the SetToken to issue.\",\"totalQuoteAmount\":\": The maximum amount the user pays for buying the underlying components.\"},\"returns\":{\"extraQuoteBalance\":\"The remaining quote balance after the purchase and issuance.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverTokens(address,address,uint256)\":{\"details\":\"Safely transfers the specified amount of the given ERC20 token to the provided address.\",\"params\":{\"amount\":\": The amount of the token to recover and transfer.\",\"to\":\": The address to which the tokens will be sent.\",\"token\":\": The instance of the ERC20 token to be recovered.\"}},\"redeemSetTokenAndExchangeTokens(address,uint256,address,uint256,address[],bytes[])\":{\"details\":\"To sell the underlying components, the payload needs to be constructed for the whitelisted exchanges.\",\"params\":{\"exchangePayloads\":\": Payloads targeted towards each exchange for selling the corresponding component.\",\"exchanges\":\": An array of addresses used to sell each component.\",\"minQuoteAmount\":\": The minimum `quoteAsset` amount the user expects to receive after selling the underlying components.\",\"quoteAsset\":\": Instance of the IERC20 token received after selling the underlying components.\",\"setToken\":\": Instance of the SetToken contract.\",\"setTokenQuantity\":\": Quantity of the SetToken to redeem.\"},\"returns\":{\"quoteAssetBalanceAfterSell\":\"The `quoteAsset` balance obtained after selling the components.\"}},\"removeSetTokenIssuanceModules(address)\":{\"details\":\"This function deletes the mapping between a SetToken and its issuance module.\",\"params\":{\"setToken\":\": The address of the SetToken for which the issuance module is being removed.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeWhitelistedFunctions(address,bytes4[])\":{\"details\":\"This function allows the contract owner to remove multiple functions, identified      by their target address and function selectors, from the whitelist. Once a function      is removed from the whitelist, it can no longer be called via the `call` function.\",\"params\":{\"selectors\":\"An array of function selectors (4-byte signatures) belonging to the target address,                  representing the functions to be removed from the whitelist.\",\"target\":\"The address of the contract that contains the functions to be removed from the whitelist.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"whitelistFunctions(address,bytes4[])\":{\"details\":\"This function allows the contract owner to whitelist multiple functions identified      by their target address and function selectors. Only whitelisted functions can      be called through the `call` function, ensuring that only approved      functions are executed.\",\"params\":{\"selectors\":\"An array of function selectors (4-byte signatures) belonging to the target address.                  Each selector represents a specific function within the target contract that is                  being whitelisted.\",\"target\":\"The address of the contract that contains the functions to be whitelisted.               Must be a valid contract address (non-zero).\"}}},\"stateVariables\":{\"setTokenIssuanceModules\":{\"details\":\"Maps each SetToken to its associated authorized IIssuanceModule.      This mapping serves two purposes:      1. To verify whether a SetToken is authorized.      2. To retrieve the corresponding IIssuanceModule for a given SetToken.\"},\"whitelistedFunctions\":{\"details\":\"Mapping of whitelisted function for a target contract.\"}},\"title\":\"TokenExchangeSetIssuer\",\"version\":1},\"userdoc\":{\"errors\":{\"ETHNotAccepted()\":[{\"notice\":\"Thrown when ETH is sent to the contract.\"}],\"ExchangeCallFailed()\":[{\"notice\":\"Thrown when a call to an exchange fails.\"}],\"ExchangeLengthMismatch()\":[{\"notice\":\"Thrown when the number of exchanges does not match the number of Set token components.\"}],\"FunctionNotWhitelisted()\":[{\"notice\":\"Thrown when attempting to call or revoke a non-whitelisted function.\"}],\"InvalidPayload()\":[{\"notice\":\"Thrown when the length of the payload for buying or selling tokens is less than 4 bytes.\"}],\"IssuanceAddressCannotBeZero()\":[{\"notice\":\"Thrown when the issuance module address provided is the zero address.\"}],\"PayloadLengthMismatch()\":[{\"notice\":\"Thrown when the length of the exchange payload does not match the number of Set token components.\"}],\"QuantityBoughtLessThanMinimum()\":[{\"notice\":\"Thrown when the amount of Set token components bought is insufficient for issuing the desired         quantity of the Set token.\"}],\"QuoteAmountCannotBeZero()\":[{\"notice\":\"Thrown when the quote asset amount for buying or selling is zero.\"}],\"ReceivedAmountLessThanExpected()\":[{\"notice\":\"Thrown when the amount received from selling the Set token is less than expected.\"}],\"SetAddressCannotBeZero()\":[{\"notice\":\"Thrown when the Set token address provided is the zero address.\"}],\"SetQuantityCannotBeZero()\":[{\"notice\":\"Thrown when the quantity of the Set token for buying or selling is zero.\"}],\"SetTokenNotWhitelisted()\":[{\"notice\":\"Thrown when attempting to buy or sell a Set token that is not whitelisted.\"}],\"TargetAddressCannotBeZero()\":[{\"notice\":\"Thrown when the target address provided is the zero address.\"}]},\"events\":{\"FunctionRevoked(address,bytes4)\":{\"notice\":\"Emitted when a previously whitelisted function is revoked for a specific target contract.\"},\"FunctionWhitelisted(address,bytes4)\":{\"notice\":\"Emitted when a function is whitelisted for a specific target contract.\"},\"IssuanceModuleAdded(address,address)\":{\"notice\":\"Emitted when an IssuanceModule is added to a SetToken.\"},\"IssuanceModuleRemoved(address,address)\":{\"notice\":\"Emitted when an IssuanceModule is removed from a SetToken.\"}},\"kind\":\"user\",\"methods\":{\"addSetTokenIssuanceModules(address,address)\":{\"notice\":\"Adds or updates the issuance module for a specified SetToken.\"},\"approveTokens(address[],address,uint256)\":{\"notice\":\"Approves a specified amount of multiple ERC20 tokens for a given spender.\"},\"buyComponentsAndIssueSetToken(address,uint256,address,uint256,address[],bytes[])\":{\"notice\":\"Buys the underlying components of the SetToken and issues the SetToken.WARNING: Dust (small amounts) of the `quoteAsset` may remain after the operation         and will not be refunded to the user. Users should use swap functions that do not leave dust.\"},\"recoverTokens(address,address,uint256)\":{\"notice\":\"Allows the contract owner to recover any ERC20 tokens held by the contract.\"},\"redeemSetTokenAndExchangeTokens(address,uint256,address,uint256,address[],bytes[])\":{\"notice\":\"Redeems the SetTokens for the underlying components and then sells them for `quoteAsset`.WARNING: Any dust accumulated during the selling of components will not be refunded.         Users should ensure they use swap functions that do not leave dust.\"},\"removeSetTokenIssuanceModules(address)\":{\"notice\":\"Removes the issuance module associated with a specified SetToken.\"},\"revokeWhitelistedFunctions(address,bytes4[])\":{\"notice\":\"Removes multiple functions from the whitelist for the specified target contract.\"},\"whitelistFunctions(address,bytes4[])\":{\"notice\":\"Whitelists multiple functions for the specified target contract.\"}},\"notice\":\"WARNING: Do not send funds directly to this contract. This contract does not handle         receiving ETH or ERC20 tokens directly. Sending funds here may result in a loss.WARNING: Any dust (small amounts) left over from the swap of components during         buy or sell operations will not be refunded. Users are advised to use swap functions         that avoid or minimize dust accumulation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/extensions/TokenExchangeSetIssuer.sol\":\"TokenExchangeSetIssuer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin-contracts-5/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin-contracts-5/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin-contracts-5/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin-contracts-5/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin-contracts-5/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin-contracts-5/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/extensions/TokenExchangeSetIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.26;\\n\\nimport {IERC20} from \\\"@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin-contracts-5/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin-contracts-5/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin-contracts-5/contracts/access/Ownable.sol\\\";\\nimport {ISetToken} from \\\"../interfaces/v0.8/ISetToken.sol\\\";\\nimport {IIssuanceModule} from \\\"../interfaces/v0.8/IIssuanceModule.sol\\\";\\n\\n/// @title TokenExchangeSetIssuer\\n/// @author Cryptex Finance\\n/// @dev Note:\\n/// - This is a peripheral contract that helps users buy the underlying components\\n///   of the SetTokens and then issues the SetToken to the user.\\n///   It also allows users to redeem their SetTokens for a single asset.\\n/// - For buying and selling, exchanges like Paraswap or Uniswap will be used,\\n///   and the payload should be constructed by an interface, such as a UI.\\n/// @notice WARNING: Do not send funds directly to this contract. This contract does not handle\\n///         receiving ETH or ERC20 tokens directly. Sending funds here may result in a loss.\\n/// @notice WARNING: Any dust (small amounts) left over from the swap of components during\\n///         buy or sell operations will not be refunded. Users are advised to use swap functions\\n///         that avoid or minimize dust accumulation.\\ncontract TokenExchangeSetIssuer is Ownable, ReentrancyGuard {\\n    /// @dev Maps each SetToken to its associated authorized IIssuanceModule.\\n    ///      This mapping serves two purposes:\\n    ///      1. To verify whether a SetToken is authorized.\\n    ///      2. To retrieve the corresponding IIssuanceModule for a given SetToken.\\n    mapping(address => address) public setTokenIssuanceModules;\\n    /// @dev Mapping of whitelisted function for a target contract.\\n    mapping(bytes24 => bool) public whitelistedFunctions;\\n\\n    /// @notice Thrown when the quantity of the Set token for buying or selling is zero.\\n    error SetQuantityCannotBeZero();\\n    /// @notice Thrown when the quote asset amount for buying or selling is zero.\\n    error QuoteAmountCannotBeZero();\\n    /// @notice Thrown when the target address provided is the zero address.\\n    error TargetAddressCannotBeZero();\\n    /// @notice Thrown when the Set token address provided is the zero address.\\n    error SetAddressCannotBeZero();\\n    /// @notice Thrown when the issuance module address provided is the zero address.\\n    error IssuanceAddressCannotBeZero();\\n    /// @notice Thrown when the amount received from selling the Set token is less than expected.\\n    error ReceivedAmountLessThanExpected();\\n    /// @notice Thrown when attempting to call or revoke a non-whitelisted function.\\n    error FunctionNotWhitelisted();\\n    /// @notice Thrown when ETH is sent to the contract.\\n    error ETHNotAccepted();\\n    /// @notice Thrown when attempting to buy or sell a Set token that is not whitelisted.\\n    error SetTokenNotWhitelisted();\\n    /// @notice Thrown when the number of exchanges does not match the number of Set token components.\\n    error ExchangeLengthMismatch();\\n    /// @notice Thrown when the length of the exchange payload does not match the number of Set token components.\\n    error PayloadLengthMismatch();\\n    /// @notice Thrown when a call to an exchange fails.\\n    error ExchangeCallFailed();\\n    /// @notice Thrown when the amount of Set token components bought is insufficient for issuing the desired\\n    ///         quantity of the Set token.\\n    error QuantityBoughtLessThanMinimum();\\n    /// @notice Thrown when the length of the payload for buying or selling tokens is less than 4 bytes.\\n    error InvalidPayload();\\n\\n    /// @notice Emitted when a function is whitelisted for a specific target contract.\\n    /// @param target The address of the target contract.\\n    /// @param selector The 4 byte function selector that has been whitelisted.\\n    event FunctionWhitelisted(address target, bytes4 selector);\\n    /// @notice Emitted when a previously whitelisted function is revoked for a specific target contract.\\n    /// @param target The address of the target contract.\\n    /// @param selector The 4 byte function selector that has been revoked.\\n    event FunctionRevoked(address target, bytes4 selector);\\n    /// @notice Emitted when an IssuanceModule is added to a SetToken.\\n    /// @param setToken The address of the SetToken.\\n    /// @param issuanceModule The address of the IssuanceModule that was added.\\n    event IssuanceModuleAdded(address setToken, address issuanceModule);\\n    /// @notice Emitted when an IssuanceModule is removed from a SetToken.\\n    /// @param setToken The address of the SetToken.\\n    /// @param issuanceModule The address of the IssuanceModule that was removed.\\n    event IssuanceModuleRemoved(address setToken, address issuanceModule);\\n\\n    constructor(address owner) Ownable(owner) {}\\n\\n    /// @notice Buys the underlying components of the SetToken and issues the SetToken.\\n    /// @dev To buy the underlying components, the payload needs to be constructed for the whitelisted exchanges.\\n    /// @param setToken: The instance of the SetToken contract.\\n    /// @param setTokenQuantity: The quantity of the SetToken to issue.\\n    /// @param quoteAsset: The instance of the IERC20 token used for buying the underlying components.\\n    /// @param totalQuoteAmount: The maximum amount the user pays for buying the underlying components.\\n    /// @param exchanges: An array of addresses used to buy each component.\\n    /// @param exchangePayloads: Payloads targeted towards each exchange for buying the corresponding component.\\n    /// @return extraQuoteBalance The remaining quote balance after the purchase and issuance.\\n    /// @notice WARNING: Dust (small amounts) of the `quoteAsset` may remain after the operation\\n    ///         and will not be refunded to the user. Users should use swap functions that do not leave dust.\\n    function buyComponentsAndIssueSetToken(\\n        ISetToken setToken,\\n        uint256 setTokenQuantity,\\n        IERC20 quoteAsset,\\n        uint256 totalQuoteAmount,\\n        address[] calldata exchanges,\\n        bytes[] calldata exchangePayloads\\n    ) external nonReentrant returns (uint256 extraQuoteBalance) {\\n        if (setTokenQuantity == 0) revert SetQuantityCannotBeZero();\\n        if (totalQuoteAmount == 0) revert QuoteAmountCannotBeZero();\\n        uint256 beforeQuoteAssetBalance = quoteAsset.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(quoteAsset, msg.sender, address(this), totalQuoteAmount);\\n        IIssuanceModule issuanceModule = _getIssuanceModule(setToken);\\n        _buyComponents(setToken, setTokenQuantity, quoteAsset, issuanceModule, exchanges, exchangePayloads);\\n        issuanceModule.issue(setToken, setTokenQuantity, msg.sender);\\n        uint256 afterQuoteAssetBalance = quoteAsset.balanceOf(address(this));\\n        extraQuoteBalance = afterQuoteAssetBalance - beforeQuoteAssetBalance;\\n        // refund extra quoteAsset\\n        if (extraQuoteBalance > 0) {\\n            SafeERC20.safeTransfer(quoteAsset, msg.sender, extraQuoteBalance);\\n        }\\n    }\\n\\n    /// @notice Redeems the SetTokens for the underlying components and then sells them for `quoteAsset`.\\n    /// @dev To sell the underlying components, the payload needs to be constructed for the whitelisted exchanges.\\n    /// @param setToken: Instance of the SetToken contract.\\n    /// @param setTokenQuantity: Quantity of the SetToken to redeem.\\n    /// @param quoteAsset: Instance of the IERC20 token received after selling the underlying components.\\n    /// @param minQuoteAmount: The minimum `quoteAsset` amount the user expects to receive after selling the underlying components.\\n    /// @param exchanges: An array of addresses used to sell each component.\\n    /// @param exchangePayloads: Payloads targeted towards each exchange for selling the corresponding component.\\n    /// @return quoteAssetBalanceAfterSell The `quoteAsset` balance obtained after selling the components.\\n    /// @notice WARNING: Any dust accumulated during the selling of components will not be refunded.\\n    ///         Users should ensure they use swap functions that do not leave dust.\\n    function redeemSetTokenAndExchangeTokens(\\n        ISetToken setToken,\\n        uint256 setTokenQuantity,\\n        IERC20 quoteAsset,\\n        uint256 minQuoteAmount,\\n        address[] calldata exchanges,\\n        bytes[] calldata exchangePayloads\\n    ) external nonReentrant returns (uint256 quoteAssetBalanceAfterSell) {\\n        if (setTokenQuantity == 0) revert SetQuantityCannotBeZero();\\n        uint256 beforeQuoteAssetBalance = quoteAsset.balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(IERC20(address(setToken)), msg.sender, address(this), setTokenQuantity);\\n\\n        IIssuanceModule issuanceModule = _getIssuanceModule(setToken);\\n        issuanceModule.redeem(setToken, setTokenQuantity, address(this));\\n\\n        _sellComponents(setToken, setTokenQuantity, issuanceModule, quoteAsset, exchanges, exchangePayloads);\\n        quoteAssetBalanceAfterSell = quoteAsset.balanceOf(address(this)) - beforeQuoteAssetBalance;\\n\\n        if (quoteAssetBalanceAfterSell < minQuoteAmount) revert ReceivedAmountLessThanExpected();\\n\\n        SafeERC20.safeTransfer(quoteAsset, msg.sender, quoteAssetBalanceAfterSell);\\n        return quoteAssetBalanceAfterSell;\\n    }\\n\\n    /// @notice Approves a specified amount of multiple ERC20 tokens for a given spender.\\n    /// @dev Only the owner can call this function\\n    /// @param tokens: An array of ERC20 token instances to approve.\\n    /// @param spender: The address that is being approved to spend the tokens.\\n    /// @param amount: The amount of each token to approve for the spender.\\n    function approveTokens(IERC20[] memory tokens, address spender, uint256 amount) external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokens[i].approve(spender, amount);\\n        }\\n    }\\n\\n    /// @notice Whitelists multiple functions for the specified target contract.\\n    /// @dev This function allows the contract owner to whitelist multiple functions identified\\n    ///      by their target address and function selectors. Only whitelisted functions can\\n    ///      be called through the `call` function, ensuring that only approved\\n    ///      functions are executed.\\n    /// @param target The address of the contract that contains the functions to be whitelisted.\\n    ///               Must be a valid contract address (non-zero).\\n    /// @param selectors An array of function selectors (4-byte signatures) belonging to the target address.\\n    ///                  Each selector represents a specific function within the target contract that is\\n    ///                  being whitelisted.\\n    function whitelistFunctions(address target, bytes4[] calldata selectors) external onlyOwner {\\n        if (target == address(0)) revert TargetAddressCannotBeZero();\\n        bytes24 identifier;\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            identifier = _calculateFunctionIdentifier(target, selectors[i]);\\n            whitelistedFunctions[identifier] = true;\\n            emit FunctionWhitelisted(target, selectors[i]);\\n        }\\n    }\\n\\n    /// @notice Removes multiple functions from the whitelist for the specified target contract.\\n    /// @dev This function allows the contract owner to remove multiple functions, identified\\n    ///      by their target address and function selectors, from the whitelist. Once a function\\n    ///      is removed from the whitelist, it can no longer be called via the `call` function.\\n    /// @param target The address of the contract that contains the functions to be removed from the whitelist.\\n    /// @param selectors An array of function selectors (4-byte signatures) belonging to the target address,\\n    ///                  representing the functions to be removed from the whitelist.\\n    function revokeWhitelistedFunctions(address target, bytes4[] calldata selectors) external onlyOwner {\\n        bytes24 identifier;\\n        for (uint256 i = 0; i < selectors.length; i++) {\\n            identifier = _calculateFunctionIdentifier(target, selectors[i]);\\n            if (!whitelistedFunctions[identifier]) revert FunctionNotWhitelisted();\\n            delete whitelistedFunctions[identifier];\\n            emit FunctionRevoked(target, selectors[i]);\\n        }\\n    }\\n\\n    /// @notice Adds or updates the issuance module for a specified SetToken.\\n    /// @dev This function maps a SetToken address to its corresponding issuance module. Both addresses must be non-zero.\\n    /// @param setToken: The address of the SetToken for which the issuance module is being set.\\n    /// @param issuanceModule: The address of the issuance module to be associated with the SetToken.\\n    function addSetTokenIssuanceModules(address setToken, address issuanceModule) external onlyOwner {\\n        if (setToken == address(0)) revert SetAddressCannotBeZero();\\n        if (issuanceModule == address(0)) revert IssuanceAddressCannotBeZero();\\n        setTokenIssuanceModules[setToken] = issuanceModule;\\n        emit IssuanceModuleAdded(setToken, issuanceModule);\\n    }\\n\\n    /// @notice Removes the issuance module associated with a specified SetToken.\\n    /// @dev This function deletes the mapping between a SetToken and its issuance module.\\n    /// @param setToken: The address of the SetToken for which the issuance module is being removed.\\n    function removeSetTokenIssuanceModules(address setToken) external onlyOwner {\\n        // _getIssuanceModule will revert if setToken is not whitelisted\\n        address issuanceModule = address(_getIssuanceModule(ISetToken(setToken)));\\n        delete setTokenIssuanceModules[setToken];\\n        emit IssuanceModuleRemoved(setToken, issuanceModule);\\n    }\\n\\n    /// @notice Allows the contract owner to recover any ERC20 tokens held by the contract.\\n    /// @dev Safely transfers the specified amount of the given ERC20 token to the provided address.\\n    /// @param token: The instance of the ERC20 token to be recovered.\\n    /// @param to: The address to which the tokens will be sent.\\n    /// @param amount: The amount of the token to recover and transfer.\\n    function recoverTokens(IERC20 token, address to, uint256 amount) external onlyOwner {\\n        SafeERC20.safeTransfer(token, to, amount);\\n    }\\n\\n    /// @notice Fallback function to revert any ETH sent to the contract.\\n    receive() external payable {\\n        revert ETHNotAccepted();\\n    }\\n\\n    /*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/\\n    /*                                 private functions                                  */\\n    /*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/\\n\\n    function _getIssuanceModule(ISetToken setToken) private view returns (IIssuanceModule) {\\n        address issuanceModule = setTokenIssuanceModules[address(setToken)];\\n        if (address(issuanceModule) == address(0)) revert SetTokenNotWhitelisted();\\n        return IIssuanceModule(issuanceModule);\\n    }\\n\\n    function _sellComponents(\\n        ISetToken setToken,\\n        uint256 setTokenQuantity,\\n        IIssuanceModule issuanceModule,\\n        IERC20 quoteAsset,\\n        address[] calldata exchanges,\\n        bytes[] calldata exchangePayloads\\n    ) private {\\n        (address[] memory components, ) = issuanceModule.getRequiredComponentUnitsForIssue(setToken, setTokenQuantity);\\n        uint256 componentsLength = components.length;\\n        if (exchanges.length != componentsLength) revert ExchangeLengthMismatch();\\n        if (exchangePayloads.length != componentsLength) revert PayloadLengthMismatch();\\n        bool success;\\n\\n        for (uint256 index = 0; index < componentsLength; index++) {\\n            if (components[index] == address(quoteAsset)) continue;\\n            address exchange = exchanges[index];\\n            bytes calldata exchangePayload = exchangePayloads[index];\\n            _requireWhitelistedFunction(exchange, exchangePayload);\\n            // Wont use native asset, so no need to pass msg.value\\n            (success, ) = exchange.call(exchangePayload);\\n            if (!success) revert ExchangeCallFailed();\\n        }\\n    }\\n\\n    function _buyComponents(\\n        ISetToken setToken,\\n        uint256 setTokenQuantity,\\n        IERC20 quoteAsset,\\n        IIssuanceModule issuanceModule,\\n        address[] calldata exchanges,\\n        bytes[] calldata exchangePayloads\\n    ) private {\\n        bool success;\\n        (address[] memory components, uint256[] memory componentQuantities) = issuanceModule\\n            .getRequiredComponentUnitsForIssue(setToken, setTokenQuantity);\\n        uint256 componentsLength = components.length;\\n        if (exchanges.length != componentsLength) revert ExchangeLengthMismatch();\\n        if (exchangePayloads.length != componentsLength) revert PayloadLengthMismatch();\\n\\n        for (uint256 index = 0; index < componentsLength; index++) {\\n            address componentAddress = components[index];\\n            if (componentAddress == address(quoteAsset)) continue;\\n            IERC20 component = IERC20(componentAddress);\\n            uint256 beforeComponentBalance = component.balanceOf(address(this));\\n\\n            address exchange = exchanges[index];\\n            bytes calldata exchangePayload = exchangePayloads[index];\\n            _requireWhitelistedFunction(exchange, exchangePayload);\\n            // Wont use native asset, so no need to pass msg.value\\n            (success, ) = exchange.call(exchangePayload);\\n            if (!success) revert ExchangeCallFailed();\\n\\n            uint256 afterComponentBalance = component.balanceOf(address(this));\\n            if (afterComponentBalance - beforeComponentBalance < componentQuantities[index])\\n                revert QuantityBoughtLessThanMinimum();\\n        }\\n    }\\n\\n    function _requireWhitelistedFunction(address target, bytes calldata payload) private view {\\n        if (payload.length < 4) revert InvalidPayload();\\n        bytes4 selector = bytes4(payload[0:4]);\\n        bytes24 identifier = _calculateFunctionIdentifier(target, selector);\\n        if (!whitelistedFunctions[identifier]) revert FunctionNotWhitelisted();\\n    }\\n\\n    function _calculateFunctionIdentifier(address target, bytes4 selector) private pure returns (bytes24 identifier) {\\n        bytes memory encodedData = abi.encodePacked(target, selector);\\n        identifier = bytes24(encodedData);\\n    }\\n}\\n\",\"keccak256\":\"0x49f512c1551ee50ca1c3c10c46430237b1dc0e14821df51a739cf4f8182ea769\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/v0.8/IIssuanceModule.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.26;\\n\\nimport { IERC20 } from \\\"@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISetToken } from \\\"./ISetToken.sol\\\";\\n\\ninterface IIssuanceModule {\\n\\n    event SetTokenIssued(\\n        address indexed _setToken,\\n        address indexed _issuer,\\n        address indexed _to,\\n        address _hookContract,\\n        uint256 _quantity\\n    );\\n\\n    event SetTokenRedeemed(\\n        address indexed _setToken,\\n        address indexed _redeemer,\\n        address indexed _to,\\n        uint256 _quantity\\n    );\\n\\n    function issue(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    ) external;\\n\\n    function redeem(\\n        ISetToken _setToken,\\n        uint256 _quantity,\\n        address _to\\n    ) external;\\n\\n    function removeModule() external;\\n\\n    function getRequiredComponentUnitsForIssue(\\n        ISetToken _setToken,\\n        uint256 _quantity\\n    ) external view returns (address[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0x97659d817865015077138f292d746414668362ba26fa090da2336b21794c8833\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/v0.8/ISetToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.26;\\n\\n\\nimport { IERC20 } from \\\"@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface ISetToken is IERC20 {\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n\\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n\\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n    function locker() external view returns (address);\\n}\\n\",\"keccak256\":\"0x699267984c21b58b736da83689df63860269f733000f57f402826374a08582b8\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611bb0380380611bb083398101604081905261002f916100c2565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610072565b5050600180556100f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d457600080fd5b81516001600160a01b03811681146100eb57600080fd5b9392505050565b611aaf806101016000396000f3fe6080604052600436106100c65760003560e01c8063719b4b331161007f5780639c5441d1116100595780639c5441d11461023e578063b316c51a1461025e578063f26581951461027e578063f2fde38b146102be57600080fd5b8063719b4b33146101e05780638da5cb5b146102005780638f9d33891461021e57600080fd5b806302a36f36146100e85780630d4fd8561461010a5780633aa932541461013d5780635672a75c1461015d5780635f3e849f146101ab578063715018a6146101cb57600080fd5b366100e3576040516248c6b960e61b815260040160405180910390fd5b600080fd5b3480156100f457600080fd5b5061010861010336600461142c565b6102de565b005b34801561011657600080fd5b5061012a610125366004611495565b61035e565b6040519081526020015b60405180910390f35b34801561014957600080fd5b506101086101583660046115ad565b610542565b34801561016957600080fd5b5061019361017836600461142c565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610134565b3480156101b757600080fd5b506101086101c636600461166d565b6105f6565b3480156101d757600080fd5b5061010861060e565b3480156101ec57600080fd5b506101086101fb36600461169d565b610622565b34801561020c57600080fd5b506000546001600160a01b0316610193565b34801561022a57600080fd5b506101086102393660046116f2565b610722565b34801561024a57600080fd5b5061012a610259366004611495565b6107dc565b34801561026a57600080fd5b5061010861027936600461169d565b6109bc565b34801561028a57600080fd5b506102ae61029936600461172b565b60036020526000908152604090205460ff1681565b6040519015158152602001610134565b3480156102ca57600080fd5b506101086102d936600461142c565b610aac565b6102e6610aef565b60006102f182610b1c565b6001600160a01b0383811660008181526002602090815260409182902080546001600160a01b03191690558151928352928416928201929092529192507f353236c19a9e3cbef65599b040c90d8c3eeabcffe05bf52b6f97b81f98b0717791015b60405180910390a15050565b6000610368610b5d565b8760000361038957604051637e50fb5f60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190611756565b90506104028a33308c610b87565b600061040d8b610b1c565b604051635c833bfd60e01b81526001600160a01b038d81166004830152602482018d905230604483015291925090821690635c833bfd90606401600060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b505050506104898b8b838c8b8b8b8b610bee565b6040516370a0823160e01b815230600482015282906001600160a01b038b16906370a0823190602401602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190611756565b6104fd919061176f565b92508783101561052057604051631fc0543160e11b815260040160405180910390fd5b61052b893385610de7565b505061053660018055565b98975050505050505050565b61054a610aef565b60005b83518110156105f05783818151811061056857610568611790565b602090810291909101015160405163095ea7b360e01b81526001600160a01b038581166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af11580156105c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e791906117a6565b5060010161054d565b50505050565b6105fe610aef565b610609838383610de7565b505050565b610616610aef565b6106206000610e18565b565b61062a610aef565b6001600160a01b038316610651576040516322a4ec7b60e11b815260040160405180910390fd5b6000805b8281101561071b5761068d8585858481811061067357610673611790565b905060200201602081019061068891906117c8565b610e68565b67ffffffffffffffff1981166000908152600360205260409020805460ff1916600117905591507f6fc4e73d7aa184267ad4580767022a65a19754e8950253003e41a13d09e12fb8858585848181106106e8576106e8611790565b90506020020160208101906106fd91906117c8565b60405161070b9291906117f2565b60405180910390a1600101610655565b5050505050565b61072a610aef565b6001600160a01b038216610751576040516358f4c5df60e01b815260040160405180910390fd5b6001600160a01b03811661077857604051632c9b834560e11b815260040160405180910390fd5b6001600160a01b0382811660008181526002602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527fd0205d3339245c23b49cd5ba5f3ece16f28876c0e36c2ded2f546c54818afa6e9101610352565b60006107e6610b5d565b8760000361080757604051637e50fb5f60e01b815260040160405180910390fd5b856000036108285760405163304a636f60e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190611756565b90506108a18833308a610b87565b60006108ac8b610b1c565b90506108be8b8b8b848b8b8b8b610ebb565b6040516336bc7a3d60e11b81526001600160a01b038c81166004830152602482018c9052336044830152821690636d78f47a90606401600060405180830381600087803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038c1691506370a0823190602401602060405180830381865afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190611756565b905061099d838261176f565b935083156109b0576109b08a3386610de7565b50505061053660018055565b6109c4610aef565b6000805b8281101561071b576109e68585858481811061067357610673611790565b67ffffffffffffffff19811660009081526003602052604090205490925060ff16610a235760405162f0905b60e21b815260040160405180910390fd5b67ffffffffffffffff1982166000908152600360205260409020805460ff191690557fdb40818f3ad7d1cc054db4679526cc70a1132d2ae29f34fa4e745f6df353cfe885858584818110610a7957610a79611790565b9050602002016020810190610a8e91906117c8565b604051610a9c9291906117f2565b60405180910390a16001016109c8565b610ab4610aef565b6001600160a01b038116610ae357604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610aec81610e18565b50565b6000546001600160a01b031633146106205760405163118cdaa760e01b8152336004820152602401610ada565b6001600160a01b0380821660009081526002602052604081205490911680610b5757604051637c21340b60e11b815260040160405180910390fd5b92915050565b600260015403610b8057604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b0384811660248301528381166044830152606482018390526105f09186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506111e8565b604051637a4ffd0360e01b81526001600160a01b0389811660048301526024820189905260009190881690637a4ffd0390604401600060405180830381865afa158015610c3f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c67919081019061187d565b508051909150848114610c8d57604051637e4019fb60e01b815260040160405180910390fd5b828114610cad57604051632900aff560e21b815260040160405180910390fd5b6000805b82811015610dd957886001600160a01b0316848281518110610cd557610cd5611790565b60200260200101516001600160a01b03160315610dd1576000888883818110610d0057610d00611790565b9050602002016020810190610d15919061142c565b9050366000888885818110610d2c57610d2c611790565b9050602002810190610d3e919061194a565b91509150610d4d83838361124b565b826001600160a01b03168282604051610d67929190611991565b6000604051808303816000865af19150503d8060008114610da4576040519150601f19603f3d011682016040523d82523d6000602084013e610da9565b606091505b50508095505084610dcd57604051636d8040c360e01b815260040160405180910390fd5b5050505b600101610cb1565b505050505050505050505050565b6040516001600160a01b0383811660248301526044820183905261060991859182169063a9059cbb90606401610bbc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051606084901b6bffffffffffffffffffffffff191660208201526001600160e01b031983166034820152815160188183030181526038909101909152600090610eb3816119a1565b949350505050565b604051637a4ffd0360e01b81526001600160a01b038981166004830152602482018990526000918291829190891690637a4ffd0390604401600060405180830381865afa158015610f10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f38919081019061187d565b81519193509150868114610f5f57604051637e4019fb60e01b815260040160405180910390fd5b848114610f7f57604051632900aff560e21b815260040160405180910390fd5b60005b818110156111d9576000848281518110610f9e57610f9e611790565b602002602001015190508b6001600160a01b0316816001600160a01b031603610fc757506111d1565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190611756565b905060008c8c8681811061104a5761104a611790565b905060200201602081019061105f919061142c565b90503660008c8c8881811061107657611076611790565b9050602002810190611088919061194a565b9150915061109783838361124b565b826001600160a01b031682826040516110b1929190611991565b6000604051808303816000865af19150503d80600081146110ee576040519150601f19603f3d011682016040523d82523d6000602084013e6110f3565b606091505b5050809b50508a61111757604051636d8040c360e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa15801561115e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111829190611756565b905089888151811061119657611196611790565b602002602001015185826111aa919061176f565b10156111c95760405163924b11a360e01b815260040160405180910390fd5b505050505050505b600101610f82565b50505050505050505050505050565b60006111fd6001600160a01b038416836112d0565b9050805160001415801561122257508080602001905181019061122091906117a6565b155b1561060957604051635274afe760e01b81526001600160a01b0384166004820152602401610ada565b600481101561126d57604051637c6953f960e01b815260040160405180910390fd5b600061127c60048284866119e8565b61128591611a12565b905060006112938583610e68565b67ffffffffffffffff19811660009081526003602052604090205490915060ff1661071b5760405162f0905b60e21b815260040160405180910390fd5b60606112de838360006112e5565b9392505050565b60608147101561130a5760405163cd78605960e01b8152306004820152602401610ada565b600080856001600160a01b031684866040516113269190611a4a565b60006040518083038185875af1925050503d8060008114611363576040519150601f19603f3d011682016040523d82523d6000602084013e611368565b606091505b5091509150611378868383611382565b9695505050505050565b60608261139757611392826113de565b6112de565b81511580156113ae57506001600160a01b0384163b155b156113d757604051639996b31560e01b81526001600160a01b0385166004820152602401610ada565b50806112de565b8051156113ee5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610aec57600080fd5b803561142781611407565b919050565b60006020828403121561143e57600080fd5b81356112de81611407565b60008083601f84011261145b57600080fd5b50813567ffffffffffffffff81111561147357600080fd5b6020830191508360208260051b850101111561148e57600080fd5b9250929050565b60008060008060008060008060c0898b0312156114b157600080fd5b88356114bc81611407565b97506020890135965060408901356114d381611407565b955060608901359450608089013567ffffffffffffffff8111156114f657600080fd5b6115028b828c01611449565b90955093505060a089013567ffffffffffffffff81111561152257600080fd5b61152e8b828c01611449565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561158157611581611542565b604052919050565b600067ffffffffffffffff8211156115a3576115a3611542565b5060051b60200190565b6000806000606084860312156115c257600080fd5b833567ffffffffffffffff8111156115d957600080fd5b8401601f810186136115ea57600080fd5b80356115fd6115f882611589565b611558565b8082825260208201915060208360051b85010192508883111561161f57600080fd5b6020840193505b8284101561164a57833561163981611407565b825260209384019390910190611626565b955061165c925050506020850161141c565b929592945050506040919091013590565b60008060006060848603121561168257600080fd5b833561168d81611407565b9250602084013561165c81611407565b6000806000604084860312156116b257600080fd5b83356116bd81611407565b9250602084013567ffffffffffffffff8111156116d957600080fd5b6116e586828701611449565b9497909650939450505050565b6000806040838503121561170557600080fd5b823561171081611407565b9150602083013561172081611407565b809150509250929050565b60006020828403121561173d57600080fd5b813567ffffffffffffffff19811681146112de57600080fd5b60006020828403121561176857600080fd5b5051919050565b81810381811115610b5757634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156117b857600080fd5b815180151581146112de57600080fd5b6000602082840312156117da57600080fd5b81356001600160e01b0319811681146112de57600080fd5b6001600160a01b039290921682526001600160e01b031916602082015260400190565b600082601f83011261182657600080fd5b81516118346115f882611589565b8082825260208201915060208360051b86010192508583111561185657600080fd5b602085015b8381101561187357805183526020928301920161185b565b5095945050505050565b6000806040838503121561189057600080fd5b825167ffffffffffffffff8111156118a757600080fd5b8301601f810185136118b857600080fd5b80516118c66115f882611589565b8082825260208201915060208360051b8501019250878311156118e857600080fd5b6020840193505b8284101561191357835161190281611407565b8252602093840193909101906118ef565b80955050505050602083015167ffffffffffffffff81111561193457600080fd5b61194085828601611815565b9150509250929050565b6000808335601e1984360301811261196157600080fd5b83018035915067ffffffffffffffff82111561197c57600080fd5b60200191503681900382131561148e57600080fd5b8183823760009101908152919050565b8051602082015167ffffffffffffffff198116919060188210156119e15767ffffffffffffffff1967ffffffffffffffff198360180360031b1b82161692505b5050919050565b600080858511156119f857600080fd5b83861115611a0557600080fd5b5050820193919092039150565b80356001600160e01b03198116906004841015611a43576001600160e01b0319600485900360031b81901b82161691505b5092915050565b6000825160005b81811015611a6b5760208186018101518583015201611a51565b50600092019182525091905056fea26469706673582212201ef83c19caa00538af0b988673c92228b4ec72a6365340273456908e940269c864736f6c634300081a0033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c8063719b4b331161007f5780639c5441d1116100595780639c5441d11461023e578063b316c51a1461025e578063f26581951461027e578063f2fde38b146102be57600080fd5b8063719b4b33146101e05780638da5cb5b146102005780638f9d33891461021e57600080fd5b806302a36f36146100e85780630d4fd8561461010a5780633aa932541461013d5780635672a75c1461015d5780635f3e849f146101ab578063715018a6146101cb57600080fd5b366100e3576040516248c6b960e61b815260040160405180910390fd5b600080fd5b3480156100f457600080fd5b5061010861010336600461142c565b6102de565b005b34801561011657600080fd5b5061012a610125366004611495565b61035e565b6040519081526020015b60405180910390f35b34801561014957600080fd5b506101086101583660046115ad565b610542565b34801561016957600080fd5b5061019361017836600461142c565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610134565b3480156101b757600080fd5b506101086101c636600461166d565b6105f6565b3480156101d757600080fd5b5061010861060e565b3480156101ec57600080fd5b506101086101fb36600461169d565b610622565b34801561020c57600080fd5b506000546001600160a01b0316610193565b34801561022a57600080fd5b506101086102393660046116f2565b610722565b34801561024a57600080fd5b5061012a610259366004611495565b6107dc565b34801561026a57600080fd5b5061010861027936600461169d565b6109bc565b34801561028a57600080fd5b506102ae61029936600461172b565b60036020526000908152604090205460ff1681565b6040519015158152602001610134565b3480156102ca57600080fd5b506101086102d936600461142c565b610aac565b6102e6610aef565b60006102f182610b1c565b6001600160a01b0383811660008181526002602090815260409182902080546001600160a01b03191690558151928352928416928201929092529192507f353236c19a9e3cbef65599b040c90d8c3eeabcffe05bf52b6f97b81f98b0717791015b60405180910390a15050565b6000610368610b5d565b8760000361038957604051637e50fb5f60e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190611756565b90506104028a33308c610b87565b600061040d8b610b1c565b604051635c833bfd60e01b81526001600160a01b038d81166004830152602482018d905230604483015291925090821690635c833bfd90606401600060405180830381600087803b15801561046157600080fd5b505af1158015610475573d6000803e3d6000fd5b505050506104898b8b838c8b8b8b8b610bee565b6040516370a0823160e01b815230600482015282906001600160a01b038b16906370a0823190602401602060405180830381865afa1580156104cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f39190611756565b6104fd919061176f565b92508783101561052057604051631fc0543160e11b815260040160405180910390fd5b61052b893385610de7565b505061053660018055565b98975050505050505050565b61054a610aef565b60005b83518110156105f05783818151811061056857610568611790565b602090810291909101015160405163095ea7b360e01b81526001600160a01b038581166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af11580156105c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e791906117a6565b5060010161054d565b50505050565b6105fe610aef565b610609838383610de7565b505050565b610616610aef565b6106206000610e18565b565b61062a610aef565b6001600160a01b038316610651576040516322a4ec7b60e11b815260040160405180910390fd5b6000805b8281101561071b5761068d8585858481811061067357610673611790565b905060200201602081019061068891906117c8565b610e68565b67ffffffffffffffff1981166000908152600360205260409020805460ff1916600117905591507f6fc4e73d7aa184267ad4580767022a65a19754e8950253003e41a13d09e12fb8858585848181106106e8576106e8611790565b90506020020160208101906106fd91906117c8565b60405161070b9291906117f2565b60405180910390a1600101610655565b5050505050565b61072a610aef565b6001600160a01b038216610751576040516358f4c5df60e01b815260040160405180910390fd5b6001600160a01b03811661077857604051632c9b834560e11b815260040160405180910390fd5b6001600160a01b0382811660008181526002602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527fd0205d3339245c23b49cd5ba5f3ece16f28876c0e36c2ded2f546c54818afa6e9101610352565b60006107e6610b5d565b8760000361080757604051637e50fb5f60e01b815260040160405180910390fd5b856000036108285760405163304a636f60e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038916906370a0823190602401602060405180830381865afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190611756565b90506108a18833308a610b87565b60006108ac8b610b1c565b90506108be8b8b8b848b8b8b8b610ebb565b6040516336bc7a3d60e11b81526001600160a01b038c81166004830152602482018c9052336044830152821690636d78f47a90606401600060405180830381600087803b15801561090e57600080fd5b505af1158015610922573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038c1691506370a0823190602401602060405180830381865afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190611756565b905061099d838261176f565b935083156109b0576109b08a3386610de7565b50505061053660018055565b6109c4610aef565b6000805b8281101561071b576109e68585858481811061067357610673611790565b67ffffffffffffffff19811660009081526003602052604090205490925060ff16610a235760405162f0905b60e21b815260040160405180910390fd5b67ffffffffffffffff1982166000908152600360205260409020805460ff191690557fdb40818f3ad7d1cc054db4679526cc70a1132d2ae29f34fa4e745f6df353cfe885858584818110610a7957610a79611790565b9050602002016020810190610a8e91906117c8565b604051610a9c9291906117f2565b60405180910390a16001016109c8565b610ab4610aef565b6001600160a01b038116610ae357604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610aec81610e18565b50565b6000546001600160a01b031633146106205760405163118cdaa760e01b8152336004820152602401610ada565b6001600160a01b0380821660009081526002602052604081205490911680610b5757604051637c21340b60e11b815260040160405180910390fd5b92915050565b600260015403610b8057604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b6040516001600160a01b0384811660248301528381166044830152606482018390526105f09186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b0383818316178352505050506111e8565b604051637a4ffd0360e01b81526001600160a01b0389811660048301526024820189905260009190881690637a4ffd0390604401600060405180830381865afa158015610c3f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c67919081019061187d565b508051909150848114610c8d57604051637e4019fb60e01b815260040160405180910390fd5b828114610cad57604051632900aff560e21b815260040160405180910390fd5b6000805b82811015610dd957886001600160a01b0316848281518110610cd557610cd5611790565b60200260200101516001600160a01b03160315610dd1576000888883818110610d0057610d00611790565b9050602002016020810190610d15919061142c565b9050366000888885818110610d2c57610d2c611790565b9050602002810190610d3e919061194a565b91509150610d4d83838361124b565b826001600160a01b03168282604051610d67929190611991565b6000604051808303816000865af19150503d8060008114610da4576040519150601f19603f3d011682016040523d82523d6000602084013e610da9565b606091505b50508095505084610dcd57604051636d8040c360e01b815260040160405180910390fd5b5050505b600101610cb1565b505050505050505050505050565b6040516001600160a01b0383811660248301526044820183905261060991859182169063a9059cbb90606401610bbc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60408051606084901b6bffffffffffffffffffffffff191660208201526001600160e01b031983166034820152815160188183030181526038909101909152600090610eb3816119a1565b949350505050565b604051637a4ffd0360e01b81526001600160a01b038981166004830152602482018990526000918291829190891690637a4ffd0390604401600060405180830381865afa158015610f10573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f38919081019061187d565b81519193509150868114610f5f57604051637e4019fb60e01b815260040160405180910390fd5b848114610f7f57604051632900aff560e21b815260040160405180910390fd5b60005b818110156111d9576000848281518110610f9e57610f9e611790565b602002602001015190508b6001600160a01b0316816001600160a01b031603610fc757506111d1565b6040516370a0823160e01b815230600482015281906000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611010573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110349190611756565b905060008c8c8681811061104a5761104a611790565b905060200201602081019061105f919061142c565b90503660008c8c8881811061107657611076611790565b9050602002810190611088919061194a565b9150915061109783838361124b565b826001600160a01b031682826040516110b1929190611991565b6000604051808303816000865af19150503d80600081146110ee576040519150601f19603f3d011682016040523d82523d6000602084013e6110f3565b606091505b5050809b50508a61111757604051636d8040c360e01b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038716906370a0823190602401602060405180830381865afa15801561115e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111829190611756565b905089888151811061119657611196611790565b602002602001015185826111aa919061176f565b10156111c95760405163924b11a360e01b815260040160405180910390fd5b505050505050505b600101610f82565b50505050505050505050505050565b60006111fd6001600160a01b038416836112d0565b9050805160001415801561122257508080602001905181019061122091906117a6565b155b1561060957604051635274afe760e01b81526001600160a01b0384166004820152602401610ada565b600481101561126d57604051637c6953f960e01b815260040160405180910390fd5b600061127c60048284866119e8565b61128591611a12565b905060006112938583610e68565b67ffffffffffffffff19811660009081526003602052604090205490915060ff1661071b5760405162f0905b60e21b815260040160405180910390fd5b60606112de838360006112e5565b9392505050565b60608147101561130a5760405163cd78605960e01b8152306004820152602401610ada565b600080856001600160a01b031684866040516113269190611a4a565b60006040518083038185875af1925050503d8060008114611363576040519150601f19603f3d011682016040523d82523d6000602084013e611368565b606091505b5091509150611378868383611382565b9695505050505050565b60608261139757611392826113de565b6112de565b81511580156113ae57506001600160a01b0384163b155b156113d757604051639996b31560e01b81526001600160a01b0385166004820152602401610ada565b50806112de565b8051156113ee5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6001600160a01b0381168114610aec57600080fd5b803561142781611407565b919050565b60006020828403121561143e57600080fd5b81356112de81611407565b60008083601f84011261145b57600080fd5b50813567ffffffffffffffff81111561147357600080fd5b6020830191508360208260051b850101111561148e57600080fd5b9250929050565b60008060008060008060008060c0898b0312156114b157600080fd5b88356114bc81611407565b97506020890135965060408901356114d381611407565b955060608901359450608089013567ffffffffffffffff8111156114f657600080fd5b6115028b828c01611449565b90955093505060a089013567ffffffffffffffff81111561152257600080fd5b61152e8b828c01611449565b999c989b5096995094979396929594505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561158157611581611542565b604052919050565b600067ffffffffffffffff8211156115a3576115a3611542565b5060051b60200190565b6000806000606084860312156115c257600080fd5b833567ffffffffffffffff8111156115d957600080fd5b8401601f810186136115ea57600080fd5b80356115fd6115f882611589565b611558565b8082825260208201915060208360051b85010192508883111561161f57600080fd5b6020840193505b8284101561164a57833561163981611407565b825260209384019390910190611626565b955061165c925050506020850161141c565b929592945050506040919091013590565b60008060006060848603121561168257600080fd5b833561168d81611407565b9250602084013561165c81611407565b6000806000604084860312156116b257600080fd5b83356116bd81611407565b9250602084013567ffffffffffffffff8111156116d957600080fd5b6116e586828701611449565b9497909650939450505050565b6000806040838503121561170557600080fd5b823561171081611407565b9150602083013561172081611407565b809150509250929050565b60006020828403121561173d57600080fd5b813567ffffffffffffffff19811681146112de57600080fd5b60006020828403121561176857600080fd5b5051919050565b81810381811115610b5757634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156117b857600080fd5b815180151581146112de57600080fd5b6000602082840312156117da57600080fd5b81356001600160e01b0319811681146112de57600080fd5b6001600160a01b039290921682526001600160e01b031916602082015260400190565b600082601f83011261182657600080fd5b81516118346115f882611589565b8082825260208201915060208360051b86010192508583111561185657600080fd5b602085015b8381101561187357805183526020928301920161185b565b5095945050505050565b6000806040838503121561189057600080fd5b825167ffffffffffffffff8111156118a757600080fd5b8301601f810185136118b857600080fd5b80516118c66115f882611589565b8082825260208201915060208360051b8501019250878311156118e857600080fd5b6020840193505b8284101561191357835161190281611407565b8252602093840193909101906118ef565b80955050505050602083015167ffffffffffffffff81111561193457600080fd5b61194085828601611815565b9150509250929050565b6000808335601e1984360301811261196157600080fd5b83018035915067ffffffffffffffff82111561197c57600080fd5b60200191503681900382131561148e57600080fd5b8183823760009101908152919050565b8051602082015167ffffffffffffffff198116919060188210156119e15767ffffffffffffffff1967ffffffffffffffff198360180360031b1b82161692505b5050919050565b600080858511156119f857600080fd5b83861115611a0557600080fd5b5050820193919092039150565b80356001600160e01b03198116906004841015611a43576001600160e01b0319600485900360031b81901b82161691505b5092915050565b6000825160005b81811015611a6b5760208186018101518583015201611a51565b50600092019182525091905056fea26469706673582212201ef83c19caa00538af0b988673c92228b4ec72a6365340273456908e940269c864736f6c634300081a0033",
  "devdoc": {
    "author": "Cryptex Finance",
    "details": "Note: - This is a peripheral contract that helps users buy the underlying components   of the SetTokens and then issues the SetToken to the user.   It also allows users to redeem their SetTokens for a single asset. - For buying and selling, exchanges like Paraswap or Uniswap will be used,   and the payload should be constructed by an interface, such as a UI.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "FunctionRevoked(address,bytes4)": {
        "params": {
          "selector": "The 4 byte function selector that has been revoked.",
          "target": "The address of the target contract."
        }
      },
      "FunctionWhitelisted(address,bytes4)": {
        "params": {
          "selector": "The 4 byte function selector that has been whitelisted.",
          "target": "The address of the target contract."
        }
      },
      "IssuanceModuleAdded(address,address)": {
        "params": {
          "issuanceModule": "The address of the IssuanceModule that was added.",
          "setToken": "The address of the SetToken."
        }
      },
      "IssuanceModuleRemoved(address,address)": {
        "params": {
          "issuanceModule": "The address of the IssuanceModule that was removed.",
          "setToken": "The address of the SetToken."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addSetTokenIssuanceModules(address,address)": {
        "details": "This function maps a SetToken address to its corresponding issuance module. Both addresses must be non-zero.",
        "params": {
          "issuanceModule": ": The address of the issuance module to be associated with the SetToken.",
          "setToken": ": The address of the SetToken for which the issuance module is being set."
        }
      },
      "approveTokens(address[],address,uint256)": {
        "details": "Only the owner can call this function",
        "params": {
          "amount": ": The amount of each token to approve for the spender.",
          "spender": ": The address that is being approved to spend the tokens.",
          "tokens": ": An array of ERC20 token instances to approve."
        }
      },
      "buyComponentsAndIssueSetToken(address,uint256,address,uint256,address[],bytes[])": {
        "details": "To buy the underlying components, the payload needs to be constructed for the whitelisted exchanges.",
        "params": {
          "exchangePayloads": ": Payloads targeted towards each exchange for buying the corresponding component.",
          "exchanges": ": An array of addresses used to buy each component.",
          "quoteAsset": ": The instance of the IERC20 token used for buying the underlying components.",
          "setToken": ": The instance of the SetToken contract.",
          "setTokenQuantity": ": The quantity of the SetToken to issue.",
          "totalQuoteAmount": ": The maximum amount the user pays for buying the underlying components."
        },
        "returns": {
          "extraQuoteBalance": "The remaining quote balance after the purchase and issuance."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverTokens(address,address,uint256)": {
        "details": "Safely transfers the specified amount of the given ERC20 token to the provided address.",
        "params": {
          "amount": ": The amount of the token to recover and transfer.",
          "to": ": The address to which the tokens will be sent.",
          "token": ": The instance of the ERC20 token to be recovered."
        }
      },
      "redeemSetTokenAndExchangeTokens(address,uint256,address,uint256,address[],bytes[])": {
        "details": "To sell the underlying components, the payload needs to be constructed for the whitelisted exchanges.",
        "params": {
          "exchangePayloads": ": Payloads targeted towards each exchange for selling the corresponding component.",
          "exchanges": ": An array of addresses used to sell each component.",
          "minQuoteAmount": ": The minimum `quoteAsset` amount the user expects to receive after selling the underlying components.",
          "quoteAsset": ": Instance of the IERC20 token received after selling the underlying components.",
          "setToken": ": Instance of the SetToken contract.",
          "setTokenQuantity": ": Quantity of the SetToken to redeem."
        },
        "returns": {
          "quoteAssetBalanceAfterSell": "The `quoteAsset` balance obtained after selling the components."
        }
      },
      "removeSetTokenIssuanceModules(address)": {
        "details": "This function deletes the mapping between a SetToken and its issuance module.",
        "params": {
          "setToken": ": The address of the SetToken for which the issuance module is being removed."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeWhitelistedFunctions(address,bytes4[])": {
        "details": "This function allows the contract owner to remove multiple functions, identified      by their target address and function selectors, from the whitelist. Once a function      is removed from the whitelist, it can no longer be called via the `call` function.",
        "params": {
          "selectors": "An array of function selectors (4-byte signatures) belonging to the target address,                  representing the functions to be removed from the whitelist.",
          "target": "The address of the contract that contains the functions to be removed from the whitelist."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "whitelistFunctions(address,bytes4[])": {
        "details": "This function allows the contract owner to whitelist multiple functions identified      by their target address and function selectors. Only whitelisted functions can      be called through the `call` function, ensuring that only approved      functions are executed.",
        "params": {
          "selectors": "An array of function selectors (4-byte signatures) belonging to the target address.                  Each selector represents a specific function within the target contract that is                  being whitelisted.",
          "target": "The address of the contract that contains the functions to be whitelisted.               Must be a valid contract address (non-zero)."
        }
      }
    },
    "stateVariables": {
      "setTokenIssuanceModules": {
        "details": "Maps each SetToken to its associated authorized IIssuanceModule.      This mapping serves two purposes:      1. To verify whether a SetToken is authorized.      2. To retrieve the corresponding IIssuanceModule for a given SetToken."
      },
      "whitelistedFunctions": {
        "details": "Mapping of whitelisted function for a target contract."
      }
    },
    "title": "TokenExchangeSetIssuer",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ETHNotAccepted()": [
        {
          "notice": "Thrown when ETH is sent to the contract."
        }
      ],
      "ExchangeCallFailed()": [
        {
          "notice": "Thrown when a call to an exchange fails."
        }
      ],
      "ExchangeLengthMismatch()": [
        {
          "notice": "Thrown when the number of exchanges does not match the number of Set token components."
        }
      ],
      "FunctionNotWhitelisted()": [
        {
          "notice": "Thrown when attempting to call or revoke a non-whitelisted function."
        }
      ],
      "InvalidPayload()": [
        {
          "notice": "Thrown when the length of the payload for buying or selling tokens is less than 4 bytes."
        }
      ],
      "IssuanceAddressCannotBeZero()": [
        {
          "notice": "Thrown when the issuance module address provided is the zero address."
        }
      ],
      "PayloadLengthMismatch()": [
        {
          "notice": "Thrown when the length of the exchange payload does not match the number of Set token components."
        }
      ],
      "QuantityBoughtLessThanMinimum()": [
        {
          "notice": "Thrown when the amount of Set token components bought is insufficient for issuing the desired         quantity of the Set token."
        }
      ],
      "QuoteAmountCannotBeZero()": [
        {
          "notice": "Thrown when the quote asset amount for buying or selling is zero."
        }
      ],
      "ReceivedAmountLessThanExpected()": [
        {
          "notice": "Thrown when the amount received from selling the Set token is less than expected."
        }
      ],
      "SetAddressCannotBeZero()": [
        {
          "notice": "Thrown when the Set token address provided is the zero address."
        }
      ],
      "SetQuantityCannotBeZero()": [
        {
          "notice": "Thrown when the quantity of the Set token for buying or selling is zero."
        }
      ],
      "SetTokenNotWhitelisted()": [
        {
          "notice": "Thrown when attempting to buy or sell a Set token that is not whitelisted."
        }
      ],
      "TargetAddressCannotBeZero()": [
        {
          "notice": "Thrown when the target address provided is the zero address."
        }
      ]
    },
    "events": {
      "FunctionRevoked(address,bytes4)": {
        "notice": "Emitted when a previously whitelisted function is revoked for a specific target contract."
      },
      "FunctionWhitelisted(address,bytes4)": {
        "notice": "Emitted when a function is whitelisted for a specific target contract."
      },
      "IssuanceModuleAdded(address,address)": {
        "notice": "Emitted when an IssuanceModule is added to a SetToken."
      },
      "IssuanceModuleRemoved(address,address)": {
        "notice": "Emitted when an IssuanceModule is removed from a SetToken."
      }
    },
    "kind": "user",
    "methods": {
      "addSetTokenIssuanceModules(address,address)": {
        "notice": "Adds or updates the issuance module for a specified SetToken."
      },
      "approveTokens(address[],address,uint256)": {
        "notice": "Approves a specified amount of multiple ERC20 tokens for a given spender."
      },
      "buyComponentsAndIssueSetToken(address,uint256,address,uint256,address[],bytes[])": {
        "notice": "Buys the underlying components of the SetToken and issues the SetToken.WARNING: Dust (small amounts) of the `quoteAsset` may remain after the operation         and will not be refunded to the user. Users should use swap functions that do not leave dust."
      },
      "recoverTokens(address,address,uint256)": {
        "notice": "Allows the contract owner to recover any ERC20 tokens held by the contract."
      },
      "redeemSetTokenAndExchangeTokens(address,uint256,address,uint256,address[],bytes[])": {
        "notice": "Redeems the SetTokens for the underlying components and then sells them for `quoteAsset`.WARNING: Any dust accumulated during the selling of components will not be refunded.         Users should ensure they use swap functions that do not leave dust."
      },
      "removeSetTokenIssuanceModules(address)": {
        "notice": "Removes the issuance module associated with a specified SetToken."
      },
      "revokeWhitelistedFunctions(address,bytes4[])": {
        "notice": "Removes multiple functions from the whitelist for the specified target contract."
      },
      "whitelistFunctions(address,bytes4[])": {
        "notice": "Whitelists multiple functions for the specified target contract."
      }
    },
    "notice": "WARNING: Do not send funds directly to this contract. This contract does not handle         receiving ETH or ERC20 tokens directly. Sending funds here may result in a loss.WARNING: Any dust (small amounts) left over from the swap of components during         buy or sell operations will not be refunded. Users are advised to use swap functions         that avoid or minimize dust accumulation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2598,
        "contract": "contracts/extensions/TokenExchangeSetIssuer.sol:TokenExchangeSetIssuer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3435,
        "contract": "contracts/extensions/TokenExchangeSetIssuer.sol:TokenExchangeSetIssuer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3690,
        "contract": "contracts/extensions/TokenExchangeSetIssuer.sol:TokenExchangeSetIssuer",
        "label": "setTokenIssuanceModules",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3695,
        "contract": "contracts/extensions/TokenExchangeSetIssuer.sol:TokenExchangeSetIssuer",
        "label": "whitelistedFunctions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes24,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes24": {
        "encoding": "inplace",
        "label": "bytes24",
        "numberOfBytes": "24"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes24,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes24",
        "label": "mapping(bytes24 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}