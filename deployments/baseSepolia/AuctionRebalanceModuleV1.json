{
  "address": "0x15A149958B48dC899FB005e38ef9C1445A1CB6E3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isAnyoneAllowedToBid",
          "type": "bool"
        }
      ],
      "name": "AnyoneBidUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPositionMultiplier",
          "type": "uint256"
        }
      ],
      "name": "AssetTargetsRaised",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sendToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiveToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IAuctionPriceAdapterV1",
          "name": "priceAdapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSellAuction",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netQuantitySentBySet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netQuantityReceivedBySet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "setTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "BidExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isBidderAllowed",
          "type": "bool"
        }
      ],
      "name": "BidderStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        }
      ],
      "name": "LockedRebalanceEndedEarly",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRaiseTargetPercentage",
          "type": "uint256"
        }
      ],
      "name": "RaiseTargetPercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISetToken",
          "name": "setToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "quoteAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSetTokenLocked",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebalanceDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPositionMultiplier",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "componentsInvolved",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "targetUnit",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "priceAdapterName",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "priceAdapterConfigData",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct AuctionRebalanceModuleV1.AuctionExecutionParams[]",
          "name": "auctionParameters",
          "type": "tuple[]"
        }
      ],
      "name": "RebalanceStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "allTargetsMet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_component",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_quoteAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_componentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quoteAssetLimit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSellAuction",
          "type": "bool"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "canRaiseAssetTargets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "canUnlockEarly",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "executionInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "targetUnit",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "priceAdapterName",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "priceAdapterConfigData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "getAllowedBidders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_component",
          "type": "address"
        }
      ],
      "name": "getAuctionSizeAndDirection",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSellAuction",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "componentQuantity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_component",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_quoteAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_componentQuantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quoteQuantityLimit",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSellAuction",
          "type": "bool"
        }
      ],
      "name": "getBidPreview",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract ISetToken",
              "name": "setToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "sendToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "receiveToken",
              "type": "address"
            },
            {
              "internalType": "contract IAuctionPriceAdapterV1",
              "name": "priceAdapter",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "priceAdapterConfigData",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "isSellAuction",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "auctionQuantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "componentPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantitySentBySet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantityReceivedBySet",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preBidTokenSentBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preBidTokenReceivedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "setTotalSupply",
              "type": "uint256"
            }
          ],
          "internalType": "struct AuctionRebalanceModuleV1.BidInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "getQuoteAssetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "getRebalanceComponents",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bidder",
          "type": "address"
        }
      ],
      "name": "isAllowedBidder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "isQuoteAssetExcessOrAtTarget",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "isRebalanceDurationElapsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissionInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAnyoneAllowedToBid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "raiseAssetTargets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rebalanceInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "quoteAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rebalanceStartTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rebalanceDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raiseTargetPercentage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setAnyoneBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_bidders",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_statuses",
          "type": "bool[]"
        }
      ],
      "name": "setBidderStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_raiseTargetPercentage",
          "type": "uint256"
        }
      ],
      "name": "setRaiseTargetPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_quoteAsset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_newComponents",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "targetUnit",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "priceAdapterName",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "priceAdapterConfigData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AuctionRebalanceModuleV1.AuctionExecutionParams[]",
          "name": "_newComponentsAuctionParams",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "targetUnit",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "priceAdapterName",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "priceAdapterConfigData",
              "type": "bytes"
            }
          ],
          "internalType": "struct AuctionRebalanceModuleV1.AuctionExecutionParams[]",
          "name": "_oldComponentsAuctionParams",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "_shouldLockSetToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_rebalanceDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialPositionMultiplier",
          "type": "uint256"
        }
      ],
      "name": "startRebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISetToken",
          "name": "_setToken",
          "type": "address"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ec1e8f99016024144b1b045506a5a215128292e10ad439b70a16dece342b767",
  "receipt": {
    "to": null,
    "from": "0x570f581D23a2AB09FD1990279D9DB6f5DcE18F4A",
    "contractAddress": "0x15A149958B48dC899FB005e38ef9C1445A1CB6E3",
    "transactionIndex": 5,
    "gasUsed": "4701000",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xab6c4953d296f71c444c64e5a331c7b5c91539c8fba56d569fa3f6a77ac1168b",
    "transactionHash": "0x0ec1e8f99016024144b1b045506a5a215128292e10ad439b70a16dece342b767",
    "logs": [],
    "blockNumber": 11174239,
    "cumulativeGasUsed": "5260702",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF74A3cbB8207A8876069F8A404C163298094C28B"
  ],
  "numDeployments": 1,
  "solcInputHash": "5b1b802a32cbf70bd84a114df54bdffd",
  "metadata": "{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAnyoneAllowedToBid\",\"type\":\"bool\"}],\"name\":\"AnyoneBidUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPositionMultiplier\",\"type\":\"uint256\"}],\"name\":\"AssetTargetsRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sendToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IAuctionPriceAdapterV1\",\"name\":\"priceAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSellAuction\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netQuantitySentBySet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netQuantityReceivedBySet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setTotalSupply\",\"type\":\"uint256\"}],\"name\":\"BidExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBidderAllowed\",\"type\":\"bool\"}],\"name\":\"BidderStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"}],\"name\":\"LockedRebalanceEndedEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRaiseTargetPercentage\",\"type\":\"uint256\"}],\"name\":\"RaiseTargetPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSetTokenLocked\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebalanceDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPositionMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"componentsInvolved\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetUnit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"priceAdapterName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"priceAdapterConfigData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct AuctionRebalanceModuleV1.AuctionExecutionParams[]\",\"name\":\"auctionParameters\",\"type\":\"tuple[]\"}],\"name\":\"RebalanceStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"allTargetsMet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_quoteAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_componentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoteAssetLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSellAuction\",\"type\":\"bool\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"canRaiseAssetTargets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"canUnlockEarly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"executionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"targetUnit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"priceAdapterName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"priceAdapterConfigData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"getAllowedBidders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"}],\"name\":\"getAuctionSizeAndDirection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSellAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"componentQuantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_component\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_quoteAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_componentQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quoteQuantityLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSellAuction\",\"type\":\"bool\"}],\"name\":\"getBidPreview\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"sendToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"receiveToken\",\"type\":\"address\"},{\"internalType\":\"contract IAuctionPriceAdapterV1\",\"name\":\"priceAdapter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"priceAdapterConfigData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"isSellAuction\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auctionQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"componentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantitySentBySet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantityReceivedBySet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBidTokenSentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBidTokenReceivedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setTotalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct AuctionRebalanceModuleV1.BidInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"getQuoteAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"getRebalanceComponents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"isAllowedBidder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"isQuoteAssetExcessOrAtTarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"isRebalanceDurationElapsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissionInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAnyoneAllowedToBid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"raiseAssetTargets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalanceInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raiseTargetPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAnyoneBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_bidders\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_statuses\",\"type\":\"bool[]\"}],\"name\":\"setBidderStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_raiseTargetPercentage\",\"type\":\"uint256\"}],\"name\":\"setRaiseTargetPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_newComponents\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetUnit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"priceAdapterName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"priceAdapterConfigData\",\"type\":\"bytes\"}],\"internalType\":\"struct AuctionRebalanceModuleV1.AuctionExecutionParams[]\",\"name\":\"_newComponentsAuctionParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetUnit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"priceAdapterName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"priceAdapterConfigData\",\"type\":\"bytes\"}],\"internalType\":\"struct AuctionRebalanceModuleV1.AuctionExecutionParams[]\",\"name\":\"_oldComponentsAuctionParams\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_shouldLockSetToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rebalanceDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPositionMultiplier\",\"type\":\"uint256\"}],\"name\":\"startRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISetToken\",\"name\":\"_setToken\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Compatible with StreamingFeeModule and BasicIssuanceModule. Review compatibility if used with additional modules.WARNING: If rebalances don't lock the SetToken, there's potential for bids to be front-run by sizable issuance/redemption. This could lead to the SetToken not approaching its target allocation proportionately to the bid size. To counteract this risk, a supply cap can be applied to the SetToken, allowing regular issuance/redemption while preventing front-running with large issuance/redemption.WARNING: This contract does NOT support ERC-777 component tokens or quote assets.WARNING: Please note that the behavior of block.timestamp varies across different EVM chains. This contract does not incorporate additional checks for unique behavior or for elements like sequencer uptime. Ensure you understand these characteristics when interacting with the contract on different EVM chains.\",\"methods\":{\"allTargetsMet(address)\":{\"details\":\"Checks externally if all target units for components have been met.\",\"params\":{\"_setToken\":\"Instance of the SetToken to be rebalanced.\"},\"returns\":{\"_0\":\"bool True if all component's target units have been met; false otherwise.\"}},\"bid(address,address,address,uint256,uint256,bool)\":{\"details\":\"ACCESS LIMITED: Only approved addresses can call this function unless isAnyoneAllowedToBid is enabled. This function is used to push the current component units closer to the target units defined in startRebalance(). Bidders specify the amount of the component they intend to buy or sell, and also specify the maximum/minimum amount of the quote asset they are willing to spend/receive. If the component amount is max uint256, the bid will fill the remaining amount to reach the target. The auction parameters, which are set by the manager, are used to determine the price of the component. Any bids that either don't move the component units towards the target, or overshoot the target, will be reverted. If protocol fees are enabled, they are collected in the token received in a bid. SELL AUCTIONS: At the start of the rebalance, sell auctions are available to be filled in their full size. BUY AUCTIONS: Buy auctions can be filled up to the amount of quote asset available in the SetToken. This means that if the SetToken does not contain the quote asset as a component, buy auctions cannot be bid on until sell auctions have been executed and there is quote asset available in the SetToken.\",\"params\":{\"_component\":\"The component for which the auction is to be bid on.\",\"_componentAmount\":\"The amount of component in the bid.\",\"_isSellAuction\":\"The direction of the auction expected by the bidder\",\"_quoteAsset\":\"The ERC20 token expected to be used as the quote asset by the bidder\",\"_quoteAssetLimit\":\"The maximum or minimum amount of quote asset that can be spent or received during the bid.\",\"_setToken\":\"The SetToken to be rebalanced.\"}},\"canRaiseAssetTargets(address)\":{\"details\":\"Checks externally if the conditions to raise asset targets are met.\",\"params\":{\"_setToken\":\"The SetToken being checked.\"},\"returns\":{\"_0\":\"bool True if conditions to raise asset targets are met; false otherwise.\"}},\"canUnlockEarly(address)\":{\"details\":\"Checks externally if the conditions for early unlock are met.\",\"params\":{\"_setToken\":\"The SetToken being checked.\"},\"returns\":{\"_0\":\"bool True if early unlock conditions are met; false otherwise.\"}},\"getAllowedBidders(address)\":{\"details\":\"Retrieves the list of addresses that are permitted to participate in the auction by calling `bid()`.\",\"params\":{\"_setToken\":\"Instance of the SetToken for which to retrieve the list of allowed bidders.\"},\"returns\":{\"_0\":\"address[]          Array of addresses representing the allowed bidders.\"}},\"getAuctionSizeAndDirection(address,address)\":{\"details\":\"Calculates the quantity of a component involved in the rebalancing of the given SetToken, and determines if the component is being bought or sold.\",\"params\":{\"_component\":\"Instance of the IERC20 component to bid on.\",\"_setToken\":\"Instance of the SetToken being rebalanced.\"},\"returns\":{\"componentQuantity\":\"  Quantity of the component involved in the bid.\",\"isSellAuction\":\"      Indicates if this is a sell auction (true) or a buy auction (false).\"}},\"getBidPreview(address,address,address,uint256,uint256,bool)\":{\"details\":\"Generates a preview of the bid for a given component in the rebalancing of the SetToken. It calculates the quantity of the component that will be exchanged and the direction of exchange.\",\"params\":{\"_component\":\"Instance of the component auction to bid on.\",\"_componentQuantity\":\"Quantity of the component involved in the bid.\",\"_isSellAuction\":\"The direction of the auction expected by the bidder\",\"_quoteAsset\":\"The ERC20 token expected to be used as the quote asset by the bidder\",\"_quoteQuantityLimit\":\"Maximum or minimum amount of quote asset spent or received during the bid.\",\"_setToken\":\"Instance of the SetToken being rebalanced.\"},\"returns\":{\"_0\":\"BidInfo              Struct containing data for the bid.\"}},\"getQuoteAssetBalance(address)\":{\"details\":\"Retrieves the balance of the quote asset for a given SetToken.\",\"params\":{\"_setToken\":\"The SetToken whose quote asset balance is being retrieved.\"},\"returns\":{\"_0\":\"uint256 The balance of the quote asset.\"}},\"getRebalanceComponents(address)\":{\"details\":\"Retrieves the array of components that are involved in the rebalancing of the given SetToken.\",\"params\":{\"_setToken\":\"Instance of the SetToken.\"},\"returns\":{\"_0\":\"address[]   Array of component addresses involved in the rebalance.\"}},\"initialize(address)\":{\"details\":\"MANAGER ONLY: Initializes the module for a SetToken, enabling access to AuctionModuleV1 for rebalances. Retrieves the current units for each asset in the Set and sets the targetUnit to match the current unit, effectively preventing any bidding until `startRebalance()` is explicitly called. The position multiplier is also logged to ensure that any changes to the position multiplier do not unintentionally open the Set for rebalancing.\",\"params\":{\"_setToken\":\"Address of the Set Token\"}},\"isAllowedBidder(address,address)\":{\"details\":\"Determines whether the given bidder address is allowed to participate in the auction.\",\"params\":{\"_bidder\":\"Address of the bidder.\",\"_setToken\":\"Instance of the SetToken for which the bid is being placed.\"},\"returns\":{\"_0\":\"bool       True if the given `_bidder` is permitted to bid, false otherwise.\"}},\"isQuoteAssetExcessOrAtTarget(address)\":{\"details\":\"Checks externally if the quote asset is in excess or at target.\",\"params\":{\"_setToken\":\"The SetToken being checked.\"},\"returns\":{\"_0\":\"bool True if the quote asset is in excess or at target; false otherwise.\"}},\"isRebalanceDurationElapsed(address)\":{\"details\":\"Checks externally if the rebalance duration has elapsed for the given SetToken.\",\"params\":{\"_setToken\":\"The SetToken whose rebalance duration is being checked.\"},\"returns\":{\"_0\":\"bool True if the rebalance duration has elapsed; false otherwise.\"}},\"raiseAssetTargets(address)\":{\"details\":\"ACCESS LIMITED: Increases asset targets uniformly when all target units have been met but there is remaining quote asset. Can be called multiple times if necessary. Targets are increased by the percentage specified by raiseAssetTargetsPercentage set by the manager. This helps in reducing tracking error and providing greater granularity in reaching an equilibrium between the excess quote asset and the components to be purchased. However, excessively raising targets may result in under-allocating to the quote asset as more of it is spent buying components to meet the new targets.\",\"params\":{\"_setToken\":\"The SetToken to be rebalanced.\"}},\"removeModule()\":{\"details\":\"Called by a SetToken to notify that this module was removed from the SetToken. Clears the `rebalanceInfo` and `permissionsInfo` of the calling SetToken. IMPORTANT: The auction execution settings of the SetToken, including auction parameters, are NOT DELETED. Restoring a previously removed module requires careful initialization of the execution settings.\"},\"setAnyoneBid(address,bool)\":{\"details\":\"MANAGER ONLY: Toggles whether or not anyone is allowed to call the `bid()` function. If set to true, it bypasses the bidAllowList, allowing any address to call the `bid()` function. The manager can call this function at any time.\",\"params\":{\"_setToken\":\"The SetToken instance.\",\"_status\":\"A boolean indicating if anyone can bid.\"}},\"setBidderStatus(address,address[],bool[])\":{\"details\":\"MANAGER ONLY: Toggles the permission status of specified addresses to call the `bid()` function. The manager can call this function at any time.\",\"params\":{\"_bidders\":\"An array of addresses whose bidding permission status is to be toggled.\",\"_setToken\":\"The SetToken being rebalanced.\",\"_statuses\":\"An array of booleans indicating the new bidding permission status for each corresponding address in `_bidders`.\"}},\"setRaiseTargetPercentage(address,uint256)\":{\"details\":\"MANAGER ONLY: Sets the percentage by which the target units for all components can be increased. Can be called at any time by the manager.\",\"params\":{\"_raiseTargetPercentage\":\"The percentage (in precise units) by which the target units can be increased.\",\"_setToken\":\"The SetToken to be rebalanced.\"}},\"startRebalance(address,address,address[],(uint256,string,bytes)[],(uint256,string,bytes)[],bool,uint256,uint256)\":{\"details\":\"MANAGER ONLY: Initiates the rebalance process by setting target allocations for the SetToken. Opens auctions for filling by the Set's designated bidders. The function takes in new components to be added with their target units and existing components with updated target units (set to 0 if removing). A positionMultiplier is supplied to adjust target units, e.g., in cases where fee accrual affects the positionMultiplier of the SetToken, ensuring proportional allocation among components. If target allocations are not met within the specified duration, the rebalance concludes with the allocations achieved.WARNING: If rebalances don't lock the SetToken, enforce a supply cap on the SetToken to prevent front-running.\",\"params\":{\"_initialPositionMultiplier\":\"Position multiplier at the start of the rebalance.\",\"_newComponents\":\"Addresses of new components to be added.\",\"_newComponentsAuctionParams\":\"AuctionExecutionParams for new components, indexed corresponding to _newComponents.\",\"_oldComponentsAuctionParams\":\"AuctionExecutionParams for existing components, indexed corresponding to                                      the current component positions. Set to 0 for components being removed.\",\"_quoteAsset\":\"ERC20 token used as the quote asset in auctions.\",\"_rebalanceDuration\":\"Duration of the rebalance in seconds.\",\"_setToken\":\"The SetToken to be rebalanced.\",\"_shouldLockSetToken\":\"Indicates if the rebalance should lock the SetToken.\"}},\"unlock(address)\":{\"details\":\"Unlocks the SetToken after rebalancing. Can be called once the rebalance duration has elapsed. Can only be called before the rebalance duration has elapsed if all targets are met, there is excess or at-target quote asset, and raiseTargetPercentage is zero. Resets the raiseTargetPercentage to zero.\",\"params\":{\"_setToken\":\"The SetToken to be unlocked.\"}}},\"title\":\"AuctionRebalanceModuleV1\"},\"userdoc\":{\"methods\":{},\"notice\":\"Facilitates rebalances for index sets via single-asset auctions. Managers initiate rebalances specifying target allocations in precise units (scaled by 10^18), quote asset (e.g., WETH, USDC), auction parameters per component, and rebalance duration through startRebalance(). Bidders can participate via bid() for individual components. Excess quote asset can be managed by proportionally increasing the targets using raiseAssetTargets().\"}},\"settings\":{\"compilationTarget\":{\"contracts/modules/AuctionRebalanceModuleV1.sol\":\"AuctionRebalanceModuleV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/interfaces/IAuctionPriceAdapterV1.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\n/**\\n * @title  IAuctionPriceAdapterV1\\n * @notice Interface for price adapter implementations for AuctionRebalanceModuleV1.\\n *         Implementations provide a custom price curve for an auction based on various parameters such as\\n *         target auction, time elapsed, bid quantity, and adapter-specific parameters.\\n */\\ninterface IAuctionPriceAdapterV1 {\\n\\n    /**\\n     * @dev Calculates and returns the current price of a component based on the given parameters.\\n     *\\n     * @param _setToken                 Address of the SetToken being rebalanced.\\n     * @param _component                Address of the component token being priced.\\n     * @param _componentQuantity        Quantity of the component being priced.\\n     * @param _timeElapsed              Time elapsed in seconds since the start of the auction.\\n     * @param _duration                 Duration of the auction in seconds.\\n     * @param _priceAdapterConfigData   Encoded configuration data specific to the price adapter.\\n     *\\n     * @return price                    Calculated current component price in precise units (10**18).\\n     */\\n    function getPrice(\\n        address _setToken,\\n        address _component,\\n        uint256 _componentQuantity,\\n        uint256 _timeElapsed,\\n        uint256 _duration,\\n        bytes memory _priceAdapterConfigData\\n    )\\n        external\\n        view\\n        returns (uint256 price);\\n\\n    /**\\n     * @dev Validates the price adapter configuration data for the given parameters.\\n     *\\n     * @param _priceAdapterConfigData   Encoded configuration data specific to the price adapter.\\n     *\\n     * @return isValid                  True if the configuration data is valid, False otherwise.\\n     */\\n    function isPriceAdapterConfigDataValid(\\n        bytes memory _priceAdapterConfigData\\n    )\\n        external\\n        view\\n        returns (bool isValid);\\n}\\n\",\"keccak256\":\"0x8e63a592d97b31ad1a2c30405c95e7b177bfbfaff6065c9c829fd71b2da90cc1\",\"license\":\"Apache License\"},\"contracts/interfaces/IController.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\ninterface IController {\\n    function addSet(address _setToken) external;\\n    function feeRecipient() external view returns(address);\\n    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\\n    function isModule(address _module) external view returns(bool);\\n    function isSet(address _setToken) external view returns(bool);\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n    function resourceId(uint256 _id) external view returns(address);\\n}\\n\",\"keccak256\":\"0xf2e8cfe3d1925721a107b37623f46db8e131e4f28929afe94162890e7713e167\",\"license\":\"Apache License\"},\"contracts/interfaces/IIntegrationRegistry.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\ninterface IIntegrationRegistry {\\n    function addIntegration(address _module, string memory _id, address _wrapper) external;\\n    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\\n    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\\n    function isValidIntegration(address _module, string memory _id) external view returns(bool);\\n}\\n\",\"keccak256\":\"0x0aca0c33d4d65132834dd27bc548e75198a7754ac1d0066e7797e2d054acbeae\",\"license\":\"Apache License\"},\"contracts/interfaces/IModule.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\n\\n/**\\n * @title IModule\\n *\\n * Interface for interacting with Modules.\\n */\\ninterface IModule {\\n    /**\\n     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\\n     * in case checks need to be made or state needs to be cleared.\\n     */\\n    function removeModule() external;\\n}\\n\",\"keccak256\":\"0x643d74d118f057b00b88d7d19fee39848a547ea1b66c5cf903161351ad2be34d\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\n/**\\n * @title IPriceOracle\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n    function masterQuoteAsset() external view returns (address);\\n}\\n\",\"keccak256\":\"0x229ce953b190ee70139461941fe6549a284793056ad976db618c302bcbec7eb1\",\"license\":\"Apache License\"},\"contracts/interfaces/ISetToken.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ISetToken\\n *\\n * Interface for operating with SetTokens.\\n */\\ninterface ISetToken is IERC20 {\\n\\n    /* ============ Enums ============ */\\n\\n    enum ModuleState {\\n        NONE,\\n        PENDING,\\n        INITIALIZED\\n    }\\n\\n    /* ============ Structs ============ */\\n    /**\\n     * The base definition of a SetToken Position\\n     *\\n     * @param component           Address of token in the Position\\n     * @param module              If not in default state, the address of associated module\\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\\n     * @param positionState       Position ENUM. Default is 0; External is 1\\n     * @param data                Arbitrary data\\n     */\\n    struct Position {\\n        address component;\\n        address module;\\n        int256 unit;\\n        uint8 positionState;\\n        bytes data;\\n    }\\n\\n    /**\\n     * A struct that stores a component's cash position details and external positions\\n     * This data structure allows O(1) access to a component's cash position units and\\n     * virtual units.\\n     *\\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\\n     *                                  by dividing a \\\"real\\\" value by the \\\"positionMultiplier\\\"\\n     * @param componentIndex\\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\\n     *                                  maps to an external position\\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\\n     */\\n    struct ComponentPosition {\\n      int256 virtualUnit;\\n      address[] externalPositionModules;\\n      mapping(address => ExternalPosition) externalPositions;\\n    }\\n\\n    /**\\n     * A struct that stores a component's external position details including virtual unit and any\\n     * auxiliary data.\\n     *\\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\\n     * @param data              Arbitrary data\\n     */\\n    struct ExternalPosition {\\n      int256 virtualUnit;\\n      bytes data;\\n    }\\n\\n\\n    /* ============ Functions ============ */\\n\\n    function addComponent(address _component) external;\\n    function removeComponent(address _component) external;\\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\\n    function addExternalPositionModule(address _component, address _positionModule) external;\\n    function removeExternalPositionModule(address _component, address _positionModule) external;\\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\\n\\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\\n\\n    function editPositionMultiplier(int256 _newMultiplier) external;\\n\\n    function mint(address _account, uint256 _quantity) external;\\n    function burn(address _account, uint256 _quantity) external;\\n\\n    function lock() external;\\n    function unlock() external;\\n\\n    function addModule(address _module) external;\\n    function removeModule(address _module) external;\\n    function initializeModule() external;\\n\\n    function setManager(address _manager) external;\\n\\n    function manager() external view returns (address);\\n    function moduleStates(address _module) external view returns (ModuleState);\\n    function getModules() external view returns (address[] memory);\\n\\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\\n    function getComponents() external view returns(address[] memory);\\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\\n    function isComponent(address _component) external view returns(bool);\\n\\n    function positionMultiplier() external view returns (int256);\\n    function getPositions() external view returns (Position[] memory);\\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\\n\\n    function isInitializedModule(address _module) external view returns(bool);\\n    function isPendingModule(address _module) external view returns(bool);\\n    function isLocked() external view returns (bool);\\n    function locker() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbc69a64ccdf807b61fdff0a2e50fc55585dc0e255f8586a5fb2f316e61be8e74\",\"license\":\"Apache License\"},\"contracts/interfaces/ISetValuer.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.6.10;\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\ninterface ISetValuer {\\n    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6491d560036cabcd569f78d8aa103c942e2665eceb301a2722e97097e665ec3f\",\"license\":\"Apache License\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title AddressArrayUtils\\n *\\n * Utility functions to handle Address Arrays\\n *\\n * CHANGELOG:\\n * - 4/21/21: Added validatePairsWithArray methods\\n */\\nlibrary AddressArrayUtils {\\n\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n    * Returns true if the value is present in the list. Uses indexOf internally.\\n    * @param A The input array to search\\n    * @param a The value to find\\n    * @return Returns isIn for the first occurrence starting from index 0\\n    */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n    * Returns true if there are 2 elements that are the same in an array\\n    * @param A The input array to search\\n    * @return Returns boolean for the first occurrence of a duplicate\\n    */\\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\\n        require(A.length > 0, \\\"A is empty\\\");\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            (address[] memory _A,) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     */\\n    function removeStorage(address[] storage A, address a)\\n        internal\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert(\\\"Address not in array.\\\");\\n        } else {\\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\\n            A.pop();\\n        }\\n    }\\n\\n    /**\\n    * Removes specified index from array\\n    * @param A The input array to search\\n    * @param index The index to remove\\n    * @return Returns the new array and the removed entry\\n    */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n\\n    /**\\n     * Validate that address and uint array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of uint\\n     */\\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bool array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bool\\n     */\\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and string array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of strings\\n     */\\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address array lengths match, and calling address array are not empty\\n     * and contain no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of addresses\\n     */\\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate that address and bytes array lengths match. Validate address array is not empty\\n     * and contains no duplicate elements.\\n     *\\n     * @param A         Array of addresses\\n     * @param B         Array of bytes\\n     */\\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\\n        require(A.length == B.length, \\\"Array length mismatch\\\");\\n        _validateLengthAndUniqueness(A);\\n    }\\n\\n    /**\\n     * Validate address array is not empty and contains no duplicate elements.\\n     *\\n     * @param A          Array of addresses\\n     */\\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\\n        require(A.length > 0, \\\"Array length must be > 0\\\");\\n        require(!hasDuplicate(A), \\\"Cannot duplicate addresses\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1b5cbf8a0b5e6a5bcdde119b278ce475b816eff4284340144fbfba80155827ad\",\"license\":\"Apache License\"},\"contracts/lib/ExplicitERC20.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title ExplicitERC20\\n *\\n * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\\n */\\nlibrary ExplicitERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * When given allowance, transfers a token from the \\\"_from\\\" to the \\\"_to\\\" of quantity \\\"_quantity\\\".\\n     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\\n     *\\n     * @param _token           ERC20 token to approve\\n     * @param _from            The account to transfer tokens from\\n     * @param _to              The account to transfer tokens to\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function transferFrom(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        // Call specified ERC20 contract to transfer tokens (via proxy).\\n        if (_quantity > 0) {\\n            uint256 existingBalance = _token.balanceOf(_to);\\n\\n            SafeERC20.safeTransferFrom(\\n                _token,\\n                _from,\\n                _to,\\n                _quantity\\n            );\\n\\n            uint256 newBalance = _token.balanceOf(_to);\\n\\n            // Verify transfer quantity is reflected in balance\\n            require(\\n                newBalance == existingBalance.add(_quantity),\\n                \\\"Invalid post transfer balance\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf40c7e9df0832695c749ad8d7e2c600181d2377739942b54fb0437237bc5bc5\",\"license\":\"Apache License\"},\"contracts/lib/Invoke.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\n\\n\\n/**\\n * @title Invoke\\n *\\n * A collection of common utility functions for interacting with the SetToken's invoke function\\n */\\nlibrary Invoke {\\n    using SafeMath for uint256;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to approve\\n     * @param _spender         The account allowed to spend the SetToken's balance\\n     * @param _quantity        The quantity of allowance to allow\\n     */\\n    function invokeApprove(\\n        ISetToken _setToken,\\n        address _token,\\n        address _spender,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        bytes memory callData = abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _spender, _quantity);\\n        _setToken.invoke(_token, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function invokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            bytes memory callData = abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _to, _quantity);\\n\\n            bytes memory returnData = _setToken.invoke(_token, 0, callData);\\n            if (returnData.length > 0) {\\n                require(abi.decode(returnData, (bool)), \\\"ERC20 transfer failed\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to transfer the ERC20 token to a recipient.\\n     * The new SetToken balance must equal the existing balance less the quantity transferred\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _token           ERC20 token to transfer\\n     * @param _to              The recipient account\\n     * @param _quantity        The quantity to transfer\\n     */\\n    function strictInvokeTransfer(\\n        ISetToken _setToken,\\n        address _token,\\n        address _to,\\n        uint256 _quantity\\n    )\\n        internal\\n    {\\n        if (_quantity > 0) {\\n            // Retrieve current balance of token for the SetToken\\n            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\\n\\n            // Get new balance of transferred token for SetToken\\n            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\\n\\n            // Verify only the transfer quantity is subtracted\\n            require(\\n                newBalance == existingBalance.sub(_quantity),\\n                \\\"Invalid post transfer balance\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Instructs the SetToken to unwrap the passed quantity of WETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _quantity);\\n        _setToken.invoke(_weth, 0, callData);\\n    }\\n\\n    /**\\n     * Instructs the SetToken to wrap the passed quantity of ETH\\n     *\\n     * @param _setToken        SetToken instance to invoke\\n     * @param _weth            WETH address\\n     * @param _quantity        The quantity to unwrap\\n     */\\n    function invokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\\n        bytes memory callData = abi.encodeWithSignature(\\\"deposit()\\\");\\n        _setToken.invoke(_weth, _quantity, callData);\\n    }\\n}\\n\",\"keccak256\":\"0xe5844321d6877a394fdff276f5735f90e8656a895966f7b90b5eb61fb070e0aa\",\"license\":\"Apache License\"},\"contracts/lib/ModuleBase.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\nimport { ExplicitERC20 } from \\\"../lib/ExplicitERC20.sol\\\";\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { IModule } from \\\"../interfaces/IModule.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { Invoke } from \\\"./Invoke.sol\\\";\\nimport { Position } from \\\"./Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\nimport { ResourceIdentifier } from \\\"../lib/ResourceIdentifier.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title ModuleBase\\n *\\n * Abstract class that houses common Module-related state and functions.\\n *\\n * CHANGELOG:\\n * - 4/21/21: Delegated modifier logic to internal helpers to reduce contract size\\n *\\n */\\nabstract contract ModuleBase is IModule {\\n    using AddressArrayUtils for address[];\\n    using Invoke for ISetToken;\\n    using Position for ISetToken;\\n    using PreciseUnitMath for uint256;\\n    using ResourceIdentifier for IController;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IController public controller;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyManagerAndValidSet(ISetToken _setToken) {\\n        _validateOnlyManagerAndValidSet(_setToken);\\n        _;\\n    }\\n\\n    modifier onlySetManager(ISetToken _setToken, address _caller) {\\n        _validateOnlySetManager(_setToken, _caller);\\n        _;\\n    }\\n\\n    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\\n        _validateOnlyValidAndInitializedSet(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the sender is not a SetToken's module or module not enabled\\n     */\\n    modifier onlyModule(ISetToken _setToken) {\\n        _validateOnlyModule(_setToken);\\n        _;\\n    }\\n\\n    /**\\n     * Utilized during module initializations to check that the module is in pending state\\n     * and that the SetToken is valid\\n     */\\n    modifier onlyValidAndPendingSet(ISetToken _setToken) {\\n        _validateOnlyValidAndPendingSet(_setToken);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller             Address of controller contract\\n     */\\n    constructor(IController _controller) public {\\n        controller = _controller;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Transfers tokens from an address (that has set allowance on the module).\\n     *\\n     * @param  _token          The address of the ERC20 token\\n     * @param  _from           The address to transfer from\\n     * @param  _to             The address to transfer to\\n     * @param  _quantity       The number of tokens to transfer\\n     */\\n    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\\n        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in name. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) {\\n        bytes32 integrationHash = getNameHash(_integrationName);\\n        return getAndValidateAdapterWithHash(integrationHash);\\n    }\\n\\n    /**\\n     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\\n     */\\n    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) {\\n        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\\n            address(this),\\n            _integrationHash\\n        );\\n\\n        require(adapter != address(0), \\\"Must be valid adapter\\\");\\n        return adapter;\\n    }\\n\\n    /**\\n     * Gets the total fee for this module of the passed in index (fee % * quantity)\\n     */\\n    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\\n        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\\n        return _quantity.preciseMul(feePercentage);\\n    }\\n\\n    /**\\n     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\\n     */\\n    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\\n        if (_feeQuantity > 0) {\\n            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity);\\n        }\\n    }\\n\\n    /**\\n     * Returns true if the module is in process of initialization on the SetToken\\n     */\\n    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\\n        return _setToken.isPendingModule(address(this));\\n    }\\n\\n    /**\\n     * Returns true if the address is the SetToken's manager\\n     */\\n    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\\n        return _setToken.manager() == _toCheck;\\n    }\\n\\n    /**\\n     * Returns true if SetToken must be enabled on the controller\\n     * and module is registered on the SetToken\\n     */\\n    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\\n        return controller.isSet(address(_setToken)) &&\\n            _setToken.isInitializedModule(address(this));\\n    }\\n\\n    /**\\n     * Hashes the string and returns a bytes32 value\\n     */\\n    function getNameHash(string memory _name) internal pure returns(bytes32) {\\n        return keccak256(bytes(_name));\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /**\\n     * Caller must SetToken manager and SetToken must be valid and initialized\\n     */\\n    function _validateOnlyManagerAndValidSet(ISetToken _setToken) internal view {\\n       require(isSetManager(_setToken, msg.sender), \\\"Must be the SetToken manager\\\");\\n       require(isSetValidAndInitialized(_setToken), \\\"Must be a valid and initialized SetToken\\\");\\n    }\\n\\n    /**\\n     * Caller must SetToken manager\\n     */\\n    function _validateOnlySetManager(ISetToken _setToken, address _caller) internal view {\\n        require(isSetManager(_setToken, _caller), \\\"Must be the SetToken manager\\\");\\n    }\\n\\n    /**\\n     * SetToken must be valid and initialized\\n     */\\n    function _validateOnlyValidAndInitializedSet(ISetToken _setToken) internal view {\\n        require(isSetValidAndInitialized(_setToken), \\\"Must be a valid and initialized SetToken\\\");\\n    }\\n\\n    /**\\n     * Caller must be initialized module and module must be enabled on the controller\\n     */\\n    function _validateOnlyModule(ISetToken _setToken) internal view {\\n        require(\\n            _setToken.moduleStates(msg.sender) == ISetToken.ModuleState.INITIALIZED,\\n            \\\"Only the module can call\\\"\\n        );\\n\\n        require(\\n            controller.isModule(msg.sender),\\n            \\\"Module must be enabled on controller\\\"\\n        );\\n    }\\n\\n    /**\\n     * SetToken must be in a pending state and module must be in pending state\\n     */\\n    function _validateOnlyValidAndPendingSet(ISetToken _setToken) internal view {\\n        require(controller.isSet(address(_setToken)), \\\"Must be controller-enabled SetToken\\\");\\n        require(isSetPendingInitialization(_setToken), \\\"Must be pending initialization\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xcf4848ce9f668c1bc17080ece182b914a58354e1094549e8fe95e4e19d372d21\",\"license\":\"Apache License\"},\"contracts/lib/Position.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\n\\n\\n/**\\n * @title Position\\n *\\n * Collection of helper functions for handling and updating SetToken Positions\\n *\\n * CHANGELOG:\\n *  - Updated editExternalPosition to work when no external position is associated with module\\n */\\nlibrary Position {\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Helper ============ */\\n\\n    /**\\n     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\\n     */\\n    function hasDefaultPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\\n     */\\n    function hasExternalPosition(ISetToken _setToken, address _component) internal view returns(bool) {\\n        return _setToken.getExternalPositionModules(_component).length > 0;\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\\n     */\\n    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) internal view returns(bool) {\\n        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\\n     */\\n    function hasSufficientExternalUnits(\\n        ISetToken _setToken,\\n        address _component,\\n        address _positionModule,\\n        uint256 _unit\\n    )\\n        internal\\n        view\\n        returns(bool)\\n    {\\n       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();\\n    }\\n\\n    /**\\n     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\\n     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of\\n     * components where needed (in light of potential external positions).\\n     *\\n     * @param _setToken           Address of SetToken being modified\\n     * @param _component          Address of the component\\n     * @param _newUnit            Quantity of Position units - must be >= 0\\n     */\\n    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\\n        bool isPositionFound = hasDefaultPosition(_setToken, _component);\\n        if (!isPositionFound && _newUnit > 0) {\\n            // If there is no Default Position and no External Modules, then component does not exist\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.addComponent(_component);\\n            }\\n        } else if (isPositionFound && _newUnit == 0) {\\n            // If there is a Default Position and no external positions, remove the component\\n            if (!hasExternalPosition(_setToken, _component)) {\\n                _setToken.removeComponent(_component);\\n            }\\n        }\\n\\n        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\\n    }\\n\\n    /**\\n     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\\n     * 1) If component is not already added then add component and external position.\\n     * 2) If component is added but no existing external position using the passed module exists then add the external position.\\n     * 3) If the existing position is being added to then just update the unit and data\\n     * 4) If the position is being closed and no other external positions or default positions are associated with the component\\n     *    then untrack the component and remove external position.\\n     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\\n     *    external position.\\n     *\\n     * @param _setToken         SetToken being updated\\n     * @param _component        Component position being updated\\n     * @param _module           Module external position is associated with\\n     * @param _newUnit          Position units of new external position\\n     * @param _data             Arbitrary data associated with the position\\n     */\\n    function editExternalPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        address _module,\\n        int256 _newUnit,\\n        bytes memory _data\\n    )\\n        internal\\n    {\\n        if (_newUnit != 0) {\\n            if (!_setToken.isComponent(_component)) {\\n                _setToken.addComponent(_component);\\n                _setToken.addExternalPositionModule(_component, _module);\\n            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\\n                _setToken.addExternalPositionModule(_component, _module);\\n            }\\n            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\\n            _setToken.editExternalPositionData(_component, _module, _data);\\n        } else {\\n            require(_data.length == 0, \\\"Passed data must be null\\\");\\n            // If no default or external position remaining then remove component from components array\\n            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\\n                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\\n                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\\n                    require(positionModules[0] == _module, \\\"External positions must be 0 to remove component\\\");\\n                    _setToken.removeComponent(_component);\\n                }\\n                _setToken.removeExternalPositionModule(_component, _module);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get total notional amount of Default position\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _positionUnit       Quantity of Position units\\n     *\\n     * @return                    Total notional amount of units\\n     */\\n    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\\n        return _setTokenSupply.preciseMul(_positionUnit);\\n    }\\n\\n    /**\\n     * Get position unit from total notional amount\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _totalNotional      Total notional amount of component prior to\\n     * @return                    Default position unit\\n     */\\n    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\\n        return _totalNotional.preciseDiv(_setTokenSupply);\\n    }\\n\\n    /**\\n     * Get the total tracked balance - total supply * position unit\\n     *\\n     * @param _setToken           Address of the SetToken\\n     * @param _component          Address of the component\\n     * @return                    Notional tracked balance\\n     */\\n    function getDefaultTrackedBalance(ISetToken _setToken, address _component) internal view returns(uint256) {\\n        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component);\\n        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\\n    }\\n\\n    /**\\n     * Calculates the new default position unit and performs the edit with the new unit\\n     *\\n     * @param _setToken                 Address of the SetToken\\n     * @param _component                Address of the component\\n     * @param _setTotalSupply           Current SetToken supply\\n     * @param _componentPreviousBalance Pre-action component balance\\n     * @return                          Current component balance\\n     * @return                          Previous position unit\\n     * @return                          New position unit\\n     */\\n    function calculateAndEditDefaultPosition(\\n        ISetToken _setToken,\\n        address _component,\\n        uint256 _setTotalSupply,\\n        uint256 _componentPreviousBalance\\n    )\\n        internal\\n        returns(uint256, uint256, uint256)\\n    {\\n        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\\n        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\\n\\n        uint256 newTokenUnit;\\n        if (currentBalance > 0) {\\n            newTokenUnit = calculateDefaultEditPositionUnit(\\n                _setTotalSupply,\\n                _componentPreviousBalance,\\n                currentBalance,\\n                positionUnit\\n            );\\n        } else {\\n            newTokenUnit = 0;\\n        }\\n\\n        editDefaultPosition(_setToken, _component, newTokenUnit);\\n\\n        return (currentBalance, positionUnit, newTokenUnit);\\n    }\\n\\n    /**\\n     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\\n     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\\n     *\\n     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\\n     * @param _preTotalNotional   Total notional amount of component prior to executing action\\n     * @param _postTotalNotional  Total notional amount of component after the executing action\\n     * @param _prePositionUnit    Position unit of SetToken prior to executing action\\n     * @return                    New position unit\\n     */\\n    function calculateDefaultEditPositionUnit(\\n        uint256 _setTokenSupply,\\n        uint256 _preTotalNotional,\\n        uint256 _postTotalNotional,\\n        uint256 _prePositionUnit\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\\n        uint256 airdroppedAmount = _preTotalNotional.sub(_prePositionUnit.preciseMul(_setTokenSupply));\\n        return _postTotalNotional.sub(airdroppedAmount).preciseDiv(_setTokenSupply);\\n    }\\n}\\n\",\"keccak256\":\"0x63213599329806ad7ec659249b450083d09c338001a260317cbcf332946e3b0b\",\"license\":\"Apache License\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport { SignedSafeMath } from \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\n\\n/**\\n * @title PreciseUnitMath\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n * - 4/21/21: Added approximatelyEquals function\\n * - 12/13/21: Added preciseDivCeil (int overloads) function\\n * - 12/13/21: Added abs function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using SafeCast for int256;\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\\n\\n    // Max unsigned integer value\\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 constant internal MAX_INT_256 = type(int256).max;\\n    int256 constant internal MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n     * returned. When `b` is 0, method reverts with divide-by-zero error.\\n     */\\n    function preciseDivCeil(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n\\n        a = a.mul(PRECISE_UNIT_INT);\\n        int256 c = a.div(b);\\n\\n        if (a % b != 0) {\\n            // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n            (a ^ b > 0) ? ++c : --c;\\n        }\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"Cant divide by 0\\\");\\n        require(a != MIN_INT_256 || b != -1, \\\"Invalid input\\\");\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n    * @dev Performs the power on a specified value, reverts on overflow.\\n    */\\n    function safePower(\\n        uint256 a,\\n        uint256 pow\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        require(a > 0, \\\"Value must be positive\\\");\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++){\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns true if a =~ b within range, false otherwise.\\n     */\\n    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n        return a <= b.add(range) && a >= b.sub(range);\\n    }\\n\\n    /**\\n     * Returns the absolute value of int256 `a` as a uint256\\n     */\\n    function abs(int256 a) internal pure returns (uint) {\\n        return a >= 0 ? a.toUint256() : a.mul(-1).toUint256();\\n    }\\n\\n    /**\\n     * Returns the negation of a\\n     */\\n    function neg(int256 a) internal pure returns (int256) {\\n        require(a > MIN_INT_256, \\\"Inversion overflow\\\");\\n        return -a;\\n    }\\n}\\n\",\"keccak256\":\"0xa490628bfb8d2afa6ec915917c9cf312360437a37448e4fdcb5a5643cbbc5b93\",\"license\":\"Apache License\"},\"contracts/lib/ResourceIdentifier.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { IIntegrationRegistry } from \\\"../interfaces/IIntegrationRegistry.sol\\\";\\nimport { IPriceOracle } from \\\"../interfaces/IPriceOracle.sol\\\";\\nimport { ISetValuer } from \\\"../interfaces/ISetValuer.sol\\\";\\n\\n/**\\n * @title ResourceIdentifier\\n *\\n * A collection of utility functions to fetch information related to Resource contracts in the system\\n */\\nlibrary ResourceIdentifier {\\n\\n    // IntegrationRegistry will always be resource ID 0 in the system\\n    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\\n    // PriceOracle will always be resource ID 1 in the system\\n    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\\n    // SetValuer resource will always be resource ID 2 in the system\\n    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\\n\\n    /* ============ Internal ============ */\\n\\n    /**\\n     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\\n     * the Controller\\n     */\\n    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\\n        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\\n     */\\n    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\\n        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\\n    }\\n\\n    /**\\n     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\\n     */\\n    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\\n        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\\n    }\\n}\\n\\n\",\"keccak256\":\"0x3b52317bbb704e39e2510398d7de47e2aeb93951fc40dacbd11139b5f578ad01\",\"license\":\"Apache License\"},\"contracts/modules/AuctionRebalanceModuleV1.sol\":{\"content\":\"/*\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport { AddressArrayUtils } from \\\"../lib/AddressArrayUtils.sol\\\";\\nimport { IAuctionPriceAdapterV1 } from \\\"../interfaces/IAuctionPriceAdapterV1.sol\\\";\\nimport { IController } from \\\"../interfaces/IController.sol\\\";\\nimport { Invoke } from \\\"../lib/Invoke.sol\\\";\\nimport { ISetToken } from \\\"../interfaces/ISetToken.sol\\\";\\nimport { ModuleBase } from \\\"../lib/ModuleBase.sol\\\";\\nimport { Position } from \\\"../lib/Position.sol\\\";\\nimport { PreciseUnitMath } from \\\"../lib/PreciseUnitMath.sol\\\";\\n\\n/**\\n * @title AuctionRebalanceModuleV1\\n * @notice Facilitates rebalances for index sets via single-asset auctions. Managers initiate\\n * rebalances specifying target allocations in precise units (scaled by 10^18), quote asset\\n * (e.g., WETH, USDC), auction parameters per component, and rebalance duration through\\n * startRebalance(). Bidders can participate via bid() for individual components. Excess\\n * quote asset can be managed by proportionally increasing the targets using raiseAssetTargets().\\n *\\n * @dev Compatible with StreamingFeeModule and BasicIssuanceModule. Review compatibility if used\\n * with additional modules.\\n * @dev WARNING: If rebalances don't lock the SetToken, there's potential for bids to be front-run\\n * by sizable issuance/redemption. This could lead to the SetToken not approaching its target allocation\\n * proportionately to the bid size. To counteract this risk, a supply cap can be applied to the SetToken,\\n * allowing regular issuance/redemption while preventing front-running with large issuance/redemption.\\n * @dev WARNING: This contract does NOT support ERC-777 component tokens or quote assets.\\n * @dev WARNING: Please note that the behavior of block.timestamp varies across different EVM chains.\\n * This contract does not incorporate additional checks for unique behavior or for elements like sequencer uptime.\\n * Ensure you understand these characteristics when interacting with the contract on different EVM chains.\\n */\\ncontract AuctionRebalanceModuleV1 is ModuleBase, ReentrancyGuard {\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using SafeMath for uint256;\\n    using Position for uint256;\\n    using Math for uint256;\\n    using Position for ISetToken;\\n    using Invoke for ISetToken;\\n    using AddressArrayUtils for address[];\\n    using AddressArrayUtils for IERC20[];\\n\\n    /* ============ Structs ============ */\\n\\n    struct AuctionExecutionParams {\\n        uint256 targetUnit;                      // Target quantity of the component in Set, in precise units (10 ** 18).\\n        string priceAdapterName;                 // Identifier for the price adapter to be used.\\n        bytes priceAdapterConfigData;            // Encoded data for configuring the chosen price adapter.\\n    }\\n\\n    struct BidPermissionInfo {\\n        bool isAnyoneAllowedToBid;               // Flag indicating if bids are open to anyone (true) or restricted (false).\\n        address[] biddersHistory;                // List of addresses that have been permissioned to bid.\\n        mapping(address => bool) bidAllowList;   // Mapping of addresses to a boolean indicating if they are allowed to bid.\\n    }\\n\\n    struct RebalanceInfo {\\n        IERC20 quoteAsset;                       // Reference to the ERC20 token used to quote auctions.\\n        uint256 rebalanceStartTime;              // Unix timestamp marking the start of the rebalance.\\n        uint256 rebalanceDuration;               // Duration of the rebalance in seconds.\\n        uint256 positionMultiplier;              // Position multiplier when target units were calculated.\\n        uint256 raiseTargetPercentage;           // Optional percentage to increase all target units if allowed, in precise units.\\n        address[] rebalanceComponents;           // List of component tokens involved in the rebalance.\\n    }\\n\\n    struct BidInfo {\\n        ISetToken setToken;                      // Instance of the SetToken contract that is being rebalanced.\\n        IERC20 sendToken;                        // The ERC20 token being sent in this bid.\\n        IERC20 receiveToken;                     // The ERC20 token being received in this bid.\\n        IAuctionPriceAdapterV1 priceAdapter;     // Instance of the price adapter contract used for this bid.\\n        bytes priceAdapterConfigData;            // Data for configuring the price adapter.\\n        bool isSellAuction;                      // Indicates if this is a sell auction (true) or a buy auction (false).\\n        uint256 auctionQuantity;                 // The quantity of the component being auctioned.\\n        uint256 componentPrice;                  // The price of the component as quoted by the price adapter.\\n        uint256 quantitySentBySet;               // Quantity of tokens sent by SetToken in this bid.\\n        uint256 quantityReceivedBySet;           // Quantity of tokens received by SetToken in this bid.\\n        uint256 preBidTokenSentBalance;          // Balance of tokens being sent by SetToken before the bid.\\n        uint256 preBidTokenReceivedBalance;      // Balance of tokens being received by SetToken before the bid.\\n        uint256 setTotalSupply;                  // Total supply of the SetToken at the time of the bid.\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    /**\\n     * @dev Emitted when the target percentage increase is modified via setRaiseTargetPercentage()\\n     * @param setToken                   Reference to the SetToken undergoing rebalancing\\n     * @param newRaiseTargetPercentage   Updated percentage for potential target unit increases, in precise units (10 ** 18)\\n     */\\n    event RaiseTargetPercentageUpdated(\\n        ISetToken indexed setToken,\\n        uint256 newRaiseTargetPercentage\\n    );\\n\\n    /**\\n     * @dev Emitted upon calling raiseAssetTargets()\\n     * @param setToken                Reference to the SetToken undergoing rebalancing\\n     * @param newPositionMultiplier   Updated position multiplier for the SetToken rebalance\\n     */\\n    event AssetTargetsRaised(\\n        ISetToken indexed setToken,\\n        uint256 newPositionMultiplier\\n    );\\n\\n    /**\\n     * @dev Emitted upon toggling the bid permission setting via setAnyoneBid()\\n     * @param setToken               Reference to the SetToken undergoing rebalancing\\n     * @param isAnyoneAllowedToBid   Flag indicating if bids are open to all (true) or restricted (false)\\n     */\\n    event AnyoneBidUpdated(\\n        ISetToken indexed setToken,\\n        bool isAnyoneAllowedToBid\\n    );\\n\\n    /**\\n     * @dev Emitted when the bidding status of an address is changed via setBidderStatus()\\n     * @param setToken          Reference to the SetToken undergoing rebalancing\\n     * @param bidder            Address whose bidding permission status is toggled\\n     * @param isBidderAllowed   Flag indicating if the address is allowed (true) or not allowed (false) to bid\\n     */\\n    event BidderStatusUpdated(\\n        ISetToken indexed setToken,\\n        address indexed bidder,\\n        bool isBidderAllowed\\n    );\\n\\n    /**\\n     * @dev Emitted when a rebalance is initiated using the startRebalance() function.\\n     * @param setToken                    Instance of the SetToken contract that is undergoing rebalancing.\\n     * @param quoteAsset                  The ERC20 token that is used as a quote currency for the auctions.\\n     * @param isSetTokenLocked            Indicates if the rebalance process locks the SetToken (true) or not (false).\\n     * @param rebalanceDuration           Duration of the rebalance process in seconds.\\n     * @param initialPositionMultiplier   Position multiplier when target units were calculated.\\n     * @param componentsInvolved          Array of addresses of the component tokens involved in the rebalance.\\n     * @param auctionParameters           Array of AuctionExecutionParams structs, containing auction parameters for each component token.\\n     */\\n    event RebalanceStarted(\\n        ISetToken indexed setToken,\\n        IERC20 indexed quoteAsset,\\n        bool isSetTokenLocked,\\n        uint256 rebalanceDuration,\\n        uint256 initialPositionMultiplier,\\n        address[] componentsInvolved,\\n        AuctionExecutionParams[] auctionParameters\\n    );\\n\\n    /**\\n     * @dev Emitted upon execution of a bid via the bid() function.\\n     * @param setToken                   Instance of the SetToken contract that is being rebalanced.\\n     * @param sendToken                  The ERC20 token that is being sent by the bidder.\\n     * @param receiveToken               The ERC20 token that is being received by the bidder.\\n     * @param bidder                     The address of the bidder.\\n     * @param priceAdapter               Instance of the price adapter contract used for this bid.\\n     * @param isSellAuction              Indicates if this is a sell auction (true) or a buy auction (false).\\n     * @param price                      The price of the component in precise units (10 ** 18).\\n     * @param netQuantitySentBySet       The net amount of tokens sent by the SetToken in the bid.\\n     * @param netQuantityReceivedBySet   The net amount of tokens received by the SetToken in the bid.\\n     * @param protocolFee                The amount of the received token allocated as a protocol fee.\\n     * @param setTotalSupply             The total supply of the SetToken at the time of the bid.\\n     */\\n    event BidExecuted(\\n        ISetToken indexed setToken,\\n        address indexed sendToken,\\n        address indexed receiveToken,\\n        address bidder,\\n        IAuctionPriceAdapterV1 priceAdapter,\\n        bool isSellAuction,\\n        uint256 price,\\n        uint256 netQuantitySentBySet,\\n        uint256 netQuantityReceivedBySet,\\n        uint256 protocolFee,\\n        uint256 setTotalSupply\\n    );\\n\\n    /**\\n     * @dev Emitted when a locked rebalance is concluded early via the unlock() function.\\n     * @param setToken            Instance of the SetToken contract that is being rebalanced.\\n     */\\n    event LockedRebalanceEndedEarly(\\n        ISetToken indexed setToken\\n    );\\n\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 private constant AUCTION_MODULE_V1_PROTOCOL_FEE_INDEX = 0;   // Index of the protocol fee percentage assigned to this module in the Controller.\\n\\n    /* ============ State Variables ============ */\\n\\n    mapping(ISetToken => mapping(IERC20 => AuctionExecutionParams)) public executionInfo;   // Maps SetToken to component tokens and their respective auction execution parameters.\\n    mapping(ISetToken => BidPermissionInfo) public permissionInfo;                          // Maps SetToken to information regarding bid permissions during a rebalance.\\n    mapping(ISetToken => RebalanceInfo) public rebalanceInfo;                               // Maps SetToken to data relevant to the most recent rebalance.\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyAllowedBidder(ISetToken _setToken) {\\n        _validateOnlyAllowedBidder(_setToken);\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IController _controller) public ModuleBase(_controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @dev MANAGER ONLY: Initiates the rebalance process by setting target allocations for the SetToken. Opens auctions\\n     * for filling by the Set's designated bidders. The function takes in new components to be added with their target units\\n     * and existing components with updated target units (set to 0 if removing). A positionMultiplier is supplied to adjust\\n     * target units, e.g., in cases where fee accrual affects the positionMultiplier of the SetToken, ensuring proportional\\n     * allocation among components. If target allocations are not met within the specified duration, the rebalance concludes\\n     * with the allocations achieved.\\n     *\\n     * @dev WARNING: If rebalances don't lock the SetToken, enforce a supply cap on the SetToken to prevent front-running.\\n     *\\n     * @param _setToken                     The SetToken to be rebalanced.\\n     * @param _quoteAsset                   ERC20 token used as the quote asset in auctions.\\n     * @param _newComponents                Addresses of new components to be added.\\n     * @param _newComponentsAuctionParams   AuctionExecutionParams for new components, indexed corresponding to _newComponents.\\n     * @param _oldComponentsAuctionParams   AuctionExecutionParams for existing components, indexed corresponding to\\n     *                                      the current component positions. Set to 0 for components being removed.\\n     * @param _shouldLockSetToken           Indicates if the rebalance should lock the SetToken.\\n     * @param _rebalanceDuration            Duration of the rebalance in seconds.\\n     * @param _initialPositionMultiplier    Position multiplier at the start of the rebalance.\\n     */\\n    function startRebalance(\\n        ISetToken _setToken,\\n        IERC20 _quoteAsset,\\n        address[] calldata _newComponents,\\n        AuctionExecutionParams[] memory _newComponentsAuctionParams,\\n        AuctionExecutionParams[] memory _oldComponentsAuctionParams,\\n        bool _shouldLockSetToken,\\n        uint256 _rebalanceDuration,\\n        uint256 _initialPositionMultiplier\\n    )\\n        external\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // Lock the SetToken if the _shouldLockSetToken flag is true and the SetToken is not already locked by this module\\n        if (_shouldLockSetToken && _setToken.locker() != address(this)) {\\n            _setToken.lock();\\n        }\\n\\n        // Aggregate components and auction parameters\\n        (address[] memory allComponents, AuctionExecutionParams[] memory allAuctionParams) = _aggregateComponentsAndAuctionParams(\\n            _setToken.getComponents(),\\n            _newComponents,\\n            _newComponentsAuctionParams,\\n            _oldComponentsAuctionParams\\n        );\\n\\n        // Set the execution information\\n        for (uint256 i = 0; i < allComponents.length; i++) {\\n            require(!_setToken.hasExternalPosition(allComponents[i]), \\\"External positions not allowed\\\");\\n            executionInfo[_setToken][IERC20(allComponents[i])] = allAuctionParams[i];\\n        }\\n\\n        // Set the rebalance information\\n        rebalanceInfo[_setToken].quoteAsset = _quoteAsset;\\n        rebalanceInfo[_setToken].rebalanceStartTime = block.timestamp;\\n        rebalanceInfo[_setToken].rebalanceDuration = _rebalanceDuration;\\n        rebalanceInfo[_setToken].positionMultiplier = _initialPositionMultiplier;\\n        rebalanceInfo[_setToken].rebalanceComponents = allComponents;\\n\\n        // Emit the RebalanceStarted event\\n        emit RebalanceStarted(_setToken, _quoteAsset, _shouldLockSetToken, _rebalanceDuration, _initialPositionMultiplier, allComponents, allAuctionParams);\\n    }\\n\\n   /**\\n     * @dev ACCESS LIMITED: Only approved addresses can call this function unless isAnyoneAllowedToBid is enabled. This function\\n     * is used to push the current component units closer to the target units defined in startRebalance().\\n     *\\n     * Bidders specify the amount of the component they intend to buy or sell, and also specify the maximum/minimum amount\\n     * of the quote asset they are willing to spend/receive. If the component amount is max uint256, the bid will fill\\n     * the remaining amount to reach the target.\\n     *\\n     * The auction parameters, which are set by the manager, are used to determine the price of the component. Any bids that\\n     * either don't move the component units towards the target, or overshoot the target, will be reverted.\\n     *\\n     * If protocol fees are enabled, they are collected in the token received in a bid.\\n     *\\n     * SELL AUCTIONS:\\n     * At the start of the rebalance, sell auctions are available to be filled in their full size.\\n     *\\n     * BUY AUCTIONS:\\n     * Buy auctions can be filled up to the amount of quote asset available in the SetToken. This means that if the SetToken\\n     * does not contain the quote asset as a component, buy auctions cannot be bid on until sell auctions have been executed\\n     * and there is quote asset available in the SetToken.\\n     *\\n     * @param _setToken          The SetToken to be rebalanced.\\n     * @param _component         The component for which the auction is to be bid on.\\n     * @param _quoteAsset        The ERC20 token expected to be used as the quote asset by the bidder\\n     * @param _componentAmount   The amount of component in the bid.\\n     * @param _quoteAssetLimit   The maximum or minimum amount of quote asset that can be spent or received during the bid.\\n     * @param _isSellAuction     The direction of the auction expected by the bidder\\n     */\\n    function bid(\\n        ISetToken _setToken,\\n        IERC20 _component,\\n        IERC20 _quoteAsset,\\n        uint256 _componentAmount,\\n        uint256 _quoteAssetLimit,\\n        bool _isSellAuction\\n    )\\n        external\\n        nonReentrant\\n        onlyAllowedBidder(_setToken)\\n    {\\n        // Validate whether the bid targets are legitimate\\n        _validateBidTargets(_setToken, _component, _quoteAsset, _componentAmount);\\n\\n        // Create the bid information structure\\n        BidInfo memory bidInfo = _createBidInfo(_setToken, _component, _componentAmount, _quoteAssetLimit, _isSellAuction);\\n\\n        // Execute the token transfer specified in the bid information\\n        _executeBid(bidInfo);\\n\\n        // Accrue protocol fee and store the amount\\n        uint256 protocolFeeAmount = _accrueProtocolFee(bidInfo);\\n\\n        // Update the position state and store the net amounts\\n        (uint256 netAmountSent, uint256 netAmountReceived) = _updatePositionState(bidInfo);\\n\\n        // Emit the BidExecuted event\\n        emit BidExecuted(\\n            bidInfo.setToken,\\n            address(bidInfo.sendToken),\\n            address(bidInfo.receiveToken),\\n            msg.sender,\\n            bidInfo.priceAdapter,\\n            bidInfo.isSellAuction,\\n            bidInfo.componentPrice,\\n            netAmountSent,\\n            netAmountReceived,\\n            protocolFeeAmount,\\n            bidInfo.setTotalSupply\\n        );\\n    }\\n\\n    /**\\n     * @dev ACCESS LIMITED: Increases asset targets uniformly when all target units have been met but there is remaining quote asset.\\n     * Can be called multiple times if necessary. Targets are increased by the percentage specified by raiseAssetTargetsPercentage set by the manager.\\n     * This helps in reducing tracking error and providing greater granularity in reaching an equilibrium between the excess quote asset\\n     * and the components to be purchased. However, excessively raising targets may result in under-allocating to the quote asset as more of\\n     * it is spent buying components to meet the new targets.\\n     *\\n     * @param _setToken   The SetToken to be rebalanced.\\n     */\\n    function raiseAssetTargets(ISetToken _setToken)\\n        external\\n        onlyAllowedBidder(_setToken)\\n        virtual\\n    {\\n        // Ensure the rebalance is in progress\\n        require(!_isRebalanceDurationElapsed(_setToken), \\\"Rebalance must be in progress\\\");\\n\\n        // Ensure that all targets are met and there is excess quote asset\\n        require(_canRaiseAssetTargets(_setToken), \\\"Targets not met or quote asset =~ 0\\\");\\n\\n        // Calculate the new positionMultiplier\\n        uint256 newPositionMultiplier = rebalanceInfo[_setToken].positionMultiplier.preciseDiv(\\n            PreciseUnitMath.preciseUnit().add(rebalanceInfo[_setToken].raiseTargetPercentage)\\n        );\\n\\n        // Update the positionMultiplier in the RebalanceInfo struct\\n        rebalanceInfo[_setToken].positionMultiplier = newPositionMultiplier;\\n\\n        // Emit the AssetTargetsRaised event\\n        emit AssetTargetsRaised(_setToken, newPositionMultiplier);\\n    }\\n\\n    /**\\n     * @dev Unlocks the SetToken after rebalancing. Can be called once the rebalance duration has elapsed.\\n     * Can only be called before the rebalance duration has elapsed if all targets are met, there is excess\\n     * or at-target quote asset, and raiseTargetPercentage is zero. Resets the raiseTargetPercentage to zero.\\n     *\\n     * @param _setToken The SetToken to be unlocked.\\n     */\\n    function unlock(ISetToken _setToken) external {\\n        bool isRebalanceDurationElapsed = _isRebalanceDurationElapsed(_setToken);\\n        bool canUnlockEarly = _canUnlockEarly(_setToken);\\n\\n        // Ensure that either the rebalance duration has elapsed or the conditions for early unlock are met\\n        require(isRebalanceDurationElapsed || canUnlockEarly, \\\"Cannot unlock early unless all targets are met and raiseTargetPercentage is zero\\\");\\n\\n        // If unlocking early, update the state\\n        if (canUnlockEarly) {\\n            delete rebalanceInfo[_setToken].rebalanceDuration;\\n            emit LockedRebalanceEndedEarly(_setToken);\\n        }\\n\\n        // Reset the raiseTargetPercentage to zero\\n        rebalanceInfo[_setToken].raiseTargetPercentage = 0;\\n\\n        // Unlock the SetToken\\n        _setToken.unlock();\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Sets the percentage by which the target units for all components can be increased.\\n     * Can be called at any time by the manager.\\n     *\\n     * @param _setToken               The SetToken to be rebalanced.\\n     * @param _raiseTargetPercentage  The percentage (in precise units) by which the target units can be increased.\\n     */\\n    function setRaiseTargetPercentage(\\n        ISetToken _setToken,\\n        uint256 _raiseTargetPercentage\\n    )\\n        external\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // Update the raise target percentage in the RebalanceInfo struct\\n        rebalanceInfo[_setToken].raiseTargetPercentage = _raiseTargetPercentage;\\n\\n        // Emit an event to log the updated raise target percentage\\n        emit RaiseTargetPercentageUpdated(_setToken, _raiseTargetPercentage);\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Toggles the permission status of specified addresses to call the `bid()` function.\\n     * The manager can call this function at any time.\\n     *\\n     * @param _setToken  The SetToken being rebalanced.\\n     * @param _bidders   An array of addresses whose bidding permission status is to be toggled.\\n     * @param _statuses  An array of booleans indicating the new bidding permission status for each corresponding address in `_bidders`.\\n     */\\n    function setBidderStatus(\\n        ISetToken _setToken,\\n        address[] memory _bidders,\\n        bool[] memory _statuses\\n    )\\n        external\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // Validate that the input arrays have the same length\\n        _bidders.validatePairsWithArray(_statuses);\\n\\n        // Iterate through the input arrays and update the permission status for each bidder\\n        for (uint256 i = 0; i < _bidders.length; i++) {\\n            _updateBiddersHistory(_setToken, _bidders[i], _statuses[i]);\\n            permissionInfo[_setToken].bidAllowList[_bidders[i]] = _statuses[i];\\n\\n            // Emit an event to log the updated permission status\\n            emit BidderStatusUpdated(_setToken, _bidders[i], _statuses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev MANAGER ONLY: Toggles whether or not anyone is allowed to call the `bid()` function.\\n     * If set to true, it bypasses the bidAllowList, allowing any address to call the `bid()` function.\\n     * The manager can call this function at any time.\\n     *\\n     * @param _setToken  The SetToken instance.\\n     * @param _status    A boolean indicating if anyone can bid.\\n     */\\n    function setAnyoneBid(\\n        ISetToken _setToken,\\n        bool _status\\n    )\\n        external\\n        onlyManagerAndValidSet(_setToken)\\n    {\\n        // Update the anyoneBid status in the PermissionInfo struct\\n        permissionInfo[_setToken].isAnyoneAllowedToBid = _status;\\n\\n        // Emit an event to log the updated anyoneBid status\\n        emit AnyoneBidUpdated(_setToken, _status);\\n    }\\n\\n\\n    /**\\n     * @dev MANAGER ONLY: Initializes the module for a SetToken, enabling access to AuctionModuleV1 for rebalances.\\n     * Retrieves the current units for each asset in the Set and sets the targetUnit to match the current unit, effectively\\n     * preventing any bidding until `startRebalance()` is explicitly called. The position multiplier is also logged to ensure that\\n     * any changes to the position multiplier do not unintentionally open the Set for rebalancing.\\n     *\\n     * @param _setToken   Address of the Set Token\\n     */\\n    function initialize(ISetToken _setToken)\\n        external\\n        onlySetManager(_setToken, msg.sender)\\n        onlyValidAndPendingSet(_setToken)\\n    {\\n        ISetToken.Position[] memory positions = _setToken.getPositions();\\n\\n        for (uint256 i = 0; i < positions.length; i++) {\\n            ISetToken.Position memory position = positions[i];\\n            require(position.positionState == 0, \\\"External positions not allowed\\\");\\n            executionInfo[_setToken][IERC20(position.component)].targetUnit = position.unit.toUint256();\\n        }\\n\\n        rebalanceInfo[_setToken].positionMultiplier = _setToken.positionMultiplier().toUint256();\\n        _setToken.initializeModule();\\n    }\\n\\n\\n    /**\\n     * @dev Called by a SetToken to notify that this module was removed from the SetToken.\\n     * Clears the `rebalanceInfo` and `permissionsInfo` of the calling SetToken.\\n     * IMPORTANT: The auction execution settings of the SetToken, including auction parameters,\\n     * are NOT DELETED. Restoring a previously removed module requires careful initialization of\\n     * the execution settings.\\n     */\\n    function removeModule() external override {\\n        BidPermissionInfo storage tokenPermissionInfo = permissionInfo[ISetToken(msg.sender)];\\n\\n        for (uint256 i = 0; i < tokenPermissionInfo.biddersHistory.length; i++) {\\n            tokenPermissionInfo.bidAllowList[tokenPermissionInfo.biddersHistory[i]] = false;\\n        }\\n\\n        delete rebalanceInfo[ISetToken(msg.sender)];\\n        delete permissionInfo[ISetToken(msg.sender)];\\n    }\\n\\n\\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * @dev Checks externally if the rebalance duration has elapsed for the given SetToken.\\n     *\\n     * @param _setToken The SetToken whose rebalance duration is being checked.\\n     * @return bool True if the rebalance duration has elapsed; false otherwise.\\n     */\\n    function isRebalanceDurationElapsed(ISetToken _setToken) external view returns (bool) {\\n        return _isRebalanceDurationElapsed(_setToken);\\n    }\\n\\n    /**\\n     * @dev Retrieves the array of components that are involved in the rebalancing of the given SetToken.\\n     *\\n     * @param _setToken    Instance of the SetToken.\\n     *\\n     * @return address[]   Array of component addresses involved in the rebalance.\\n     */\\n    function getRebalanceComponents(ISetToken _setToken)\\n        external\\n        view\\n        onlyValidAndInitializedSet(_setToken)\\n        returns (address[] memory)\\n    {\\n        return rebalanceInfo[_setToken].rebalanceComponents;\\n    }\\n\\n    /**\\n     * @dev Calculates the quantity of a component involved in the rebalancing of the given SetToken,\\n     * and determines if the component is being bought or sold.\\n     *\\n     * @param _setToken    Instance of the SetToken being rebalanced.\\n     * @param _component   Instance of the IERC20 component to bid on.\\n     *\\n     * @return isSellAuction       Indicates if this is a sell auction (true) or a buy auction (false).\\n     * @return componentQuantity   Quantity of the component involved in the bid.\\n     */\\n    function getAuctionSizeAndDirection(\\n        ISetToken _setToken,\\n        IERC20 _component\\n    )\\n        external\\n        view\\n        onlyValidAndInitializedSet(_setToken)\\n        returns (bool isSellAuction, uint256 componentQuantity)\\n    {\\n        require(\\n            rebalanceInfo[_setToken].rebalanceComponents.contains(address(_component)),\\n            \\\"Component not part of rebalance\\\"\\n        );\\n\\n        uint256 totalSupply = _setToken.totalSupply();\\n        return _calculateAuctionSizeAndDirection(_setToken, _component, totalSupply);\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of the quote asset for a given SetToken.\\n     *\\n     * @param _setToken The SetToken whose quote asset balance is being retrieved.\\n     * @return uint256 The balance of the quote asset.\\n     */\\n    function getQuoteAssetBalance(ISetToken _setToken) external view returns (uint256) {\\n        RebalanceInfo storage rebalance = rebalanceInfo[_setToken];\\n        return IERC20(rebalance.quoteAsset).balanceOf(address(_setToken));\\n    }\\n\\n    /**\\n     * @dev Generates a preview of the bid for a given component in the rebalancing of the SetToken.\\n     * It calculates the quantity of the component that will be exchanged and the direction of exchange.\\n     *\\n     * @param _setToken             Instance of the SetToken being rebalanced.\\n     * @param _component            Instance of the component auction to bid on.\\n     * @param _quoteAsset           The ERC20 token expected to be used as the quote asset by the bidder\\n     * @param _componentQuantity    Quantity of the component involved in the bid.\\n     * @param _quoteQuantityLimit   Maximum or minimum amount of quote asset spent or received during the bid.\\n     * @param _isSellAuction     The direction of the auction expected by the bidder\\n     *\\n     * @return BidInfo              Struct containing data for the bid.\\n     */\\n    function getBidPreview(\\n        ISetToken _setToken,\\n        IERC20 _component,\\n        IERC20 _quoteAsset,\\n        uint256 _componentQuantity,\\n        uint256 _quoteQuantityLimit,\\n        bool _isSellAuction\\n    )\\n        external\\n        view\\n        onlyValidAndInitializedSet(_setToken)\\n        returns (BidInfo memory)\\n    {\\n        _validateBidTargets(_setToken, _component, _quoteAsset, _componentQuantity);\\n        BidInfo memory bidInfo = _createBidInfo(_setToken, _component, _componentQuantity, _quoteQuantityLimit, _isSellAuction);\\n\\n        return bidInfo;\\n    }\\n\\n    /**\\n     * @dev Checks externally if the conditions for early unlock are met.\\n     *\\n     * @param _setToken The SetToken being checked.\\n     * @return bool True if early unlock conditions are met; false otherwise.\\n     */\\n    function canUnlockEarly(ISetToken _setToken) external view returns (bool) {\\n        return _canUnlockEarly(_setToken);\\n    }\\n\\n    /**\\n     * @dev Checks externally if the conditions to raise asset targets are met.\\n     *\\n     * @param _setToken The SetToken being checked.\\n     * @return bool True if conditions to raise asset targets are met; false otherwise.\\n     */\\n    function canRaiseAssetTargets(ISetToken _setToken) external view returns (bool) {\\n        return _canRaiseAssetTargets(_setToken);\\n    }\\n\\n    /**\\n     * @dev Checks externally if all target units for components have been met.\\n     *\\n     * @param _setToken Instance of the SetToken to be rebalanced.\\n     * @return bool True if all component's target units have been met; false otherwise.\\n     */\\n    function allTargetsMet(ISetToken _setToken) external view returns (bool) {\\n        return _allTargetsMet(_setToken);\\n    }\\n\\n    /**\\n     * @dev Checks externally if the quote asset is in excess or at target.\\n     *\\n     * @param _setToken The SetToken being checked.\\n     * @return bool True if the quote asset is in excess or at target; false otherwise.\\n     */\\n    function isQuoteAssetExcessOrAtTarget(ISetToken _setToken) external view returns (bool) {\\n        return _isQuoteAssetExcessOrAtTarget(_setToken);\\n    }\\n\\n    /**\\n     * @dev Determines whether the given bidder address is allowed to participate in the auction.\\n     *\\n     * @param _setToken   Instance of the SetToken for which the bid is being placed.\\n     * @param _bidder     Address of the bidder.\\n     *\\n     * @return bool       True if the given `_bidder` is permitted to bid, false otherwise.\\n     */\\n    function isAllowedBidder(ISetToken _setToken, address _bidder)\\n        external\\n        view\\n        onlyValidAndInitializedSet(_setToken)\\n        returns (bool)\\n    {\\n        return _isAllowedBidder(_setToken, _bidder);\\n    }\\n\\n    /**\\n     * @dev Retrieves the list of addresses that are permitted to participate in the auction by calling `bid()`.\\n     *\\n     * @param _setToken           Instance of the SetToken for which to retrieve the list of allowed bidders.\\n     *\\n     * @return address[]          Array of addresses representing the allowed bidders.\\n     */\\n    function getAllowedBidders(ISetToken _setToken)\\n        external\\n        view\\n        onlyValidAndInitializedSet(_setToken)\\n        returns (address[] memory)\\n    {\\n        return permissionInfo[_setToken].biddersHistory;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @dev Aggregates the current SetToken components with the new components and validates their auction parameters.\\n     * Ensures that the sizes of the new components and new auction parameters arrays are the same, and that the number of current component auction parameters\\n     * matches the number of current components. Additionally, it validates that the price adapter exists, the price adapter configuration data is valid for the adapter,\\n     * and the target unit is greater than zero for new components. The function reverts if there is a duplicate component or if the array lengths are mismatched.\\n     *\\n     * @param _currentComponents          The current set of SetToken components.\\n     * @param _newComponents              The new components to add to the allocation.\\n     * @param _newComponentsAuctionParams The auction params for the new components, corresponding by index.\\n     * @param _oldComponentsAuctionParams The auction params for the old components, corresponding by index.\\n     * @return aggregateComponents        Combined array of current and new components, without duplicates.\\n     * @return aggregateAuctionParams     Combined array of old and new component auction params, without duplicates.\\n     */\\n    function _aggregateComponentsAndAuctionParams(\\n        address[] memory _currentComponents,\\n        address[] calldata _newComponents,\\n        AuctionExecutionParams[] memory _newComponentsAuctionParams,\\n        AuctionExecutionParams[] memory _oldComponentsAuctionParams\\n    )\\n        internal\\n        view\\n        returns (address[] memory aggregateComponents, AuctionExecutionParams[] memory aggregateAuctionParams)\\n    {\\n        // Validate input arrays: new components and new auction params must have the same length,\\n        // old components and old auction params must have the same length.\\n        require(_newComponents.length == _newComponentsAuctionParams.length, \\\"New components and params length mismatch\\\");\\n        require(_currentComponents.length == _oldComponentsAuctionParams.length, \\\"Old components and params length mismatch\\\");\\n\\n        // Aggregate the current components and new components\\n        aggregateComponents = _currentComponents.extend(_newComponents);\\n\\n        // Ensure there are no duplicates in the aggregated components\\n        require(!aggregateComponents.hasDuplicate(), \\\"Cannot have duplicate components\\\");\\n\\n        // Aggregate and validate the old and new auction params\\n        aggregateAuctionParams = _concatAndValidateAuctionParams(_oldComponentsAuctionParams, _newComponentsAuctionParams);\\n    }\\n\\n    /**\\n     * @dev Validates that the component is an eligible target for bids during the rebalance. Bids cannot be placed explicitly\\n     * on the rebalance quote asset, it may only be implicitly bid by being the quote asset for other component bids.\\n     *\\n     * @param _setToken          The SetToken instance involved in the rebalance.\\n     * @param _component         The component to be validated.\\n     * @param _quoteAsset        The ERC20 token expected to be used as the quote asset by the bidder\\n     * @param _componentAmount   The amount of component in the bid.\\n     */\\n    function _validateBidTargets(\\n        ISetToken _setToken,\\n        IERC20 _component,\\n        IERC20 _quoteAsset,\\n        uint256 _componentAmount\\n    )\\n        internal\\n        view\\n    {\\n        IERC20 quoteAsset = rebalanceInfo[_setToken].quoteAsset;\\n        // Ensure that the component is not the quote asset, as it cannot be explicitly bid on.\\n        require(_component != quoteAsset, \\\"Cannot bid explicitly on Quote Asset\\\");\\n\\n        // Ensure that the auction quote asset matches the quote asset expected by the bidder.\\n        require(_quoteAsset == quoteAsset, \\\"Quote asset mismatch\\\");\\n\\n        // Ensure that the component is part of the rebalance.\\n        require(rebalanceInfo[_setToken].rebalanceComponents.contains(address(_component)), \\\"Component not part of rebalance\\\");\\n\\n        // Ensure that the SetToken doesn't have an external position for the component.\\n        require(!_setToken.hasExternalPosition(address(_component)), \\\"External positions not allowed\\\");\\n\\n        // Ensure that the rebalance is in progress.\\n        require(!_isRebalanceDurationElapsed(_setToken), \\\"Rebalance must be in progress\\\");\\n\\n        // Ensure that the component amount is greater than zero.\\n        require(_componentAmount > 0, \\\"Component amount must be > 0\\\");\\n    }\\n\\n    /**\\n     * @dev Creates and returns a BidInfo struct. The function reverts if the auction target has already been met.\\n     *\\n     * @param _setToken             The SetToken instance involved in the rebalance.\\n     * @param _component            The component to bid on.\\n     * @param _componentQuantity    The amount of component in the bid.\\n     * @param _quoteQuantityLimit   The max/min amount of quote asset to be spent/received during the bid.\\n     * @param _isSellAuction     The direction of the auction expected by the bidder\\n     *\\n     * @return bidInfo              Struct containing data for the bid.\\n     */\\n    function _createBidInfo(\\n        ISetToken _setToken,\\n        IERC20 _component,\\n        uint256 _componentQuantity,\\n        uint256 _quoteQuantityLimit,\\n        bool _isSellAuction\\n    )\\n        internal\\n        view\\n        returns (BidInfo memory bidInfo)\\n    {\\n        // Populate the bid info structure with basic information.\\n        bidInfo.setToken = _setToken;\\n        bidInfo.setTotalSupply = _setToken.totalSupply();\\n        bidInfo.priceAdapter = _getAuctionPriceAdapter(_setToken, _component);\\n        bidInfo.priceAdapterConfigData = executionInfo[_setToken][_component].priceAdapterConfigData;\\n\\n        // Calculate the auction size and direction.\\n        (bidInfo.isSellAuction, bidInfo.auctionQuantity) = _calculateAuctionSizeAndDirection(\\n            _setToken,\\n            _component,\\n            bidInfo.setTotalSupply\\n        );\\n\\n        // Ensure that the auction direction matches the direction expected by the bidder.\\n        require(bidInfo.isSellAuction == _isSellAuction, \\\"Auction direction mismatch\\\");\\n\\n        // Settle the auction if the component quantity is max uint256.\\n        // Ensure that the component quantity in the bid does not exceed the available auction quantity.\\n        if (_componentQuantity == type(uint256).max) {\\n            _componentQuantity = bidInfo.auctionQuantity;\\n        } else {\\n            require(_componentQuantity <= bidInfo.auctionQuantity, \\\"Bid size exceeds auction quantity\\\");\\n        }\\n\\n        // Set the sendToken and receiveToken based on the auction type (sell or buy).\\n        (bidInfo.sendToken, bidInfo.receiveToken) = _getSendAndReceiveTokens(bidInfo.isSellAuction, _setToken, _component);\\n\\n        // Retrieve the current price for the component.\\n        bidInfo.componentPrice = bidInfo.priceAdapter.getPrice(\\n            address(_setToken),\\n            address(_component),\\n            _componentQuantity,\\n            block.timestamp.sub(rebalanceInfo[_setToken].rebalanceStartTime),\\n            rebalanceInfo[_setToken].rebalanceDuration,\\n            bidInfo.priceAdapterConfigData\\n        );\\n\\n        // Calculate the quantity of quote asset involved in the bid.\\n        uint256 quoteAssetQuantity = _calculateQuoteAssetQuantity(\\n            bidInfo.isSellAuction,\\n            _componentQuantity,\\n            bidInfo.componentPrice\\n        );\\n\\n        // Store pre-bid token balances for later use.\\n        bidInfo.preBidTokenSentBalance = bidInfo.sendToken.balanceOf(address(_setToken));\\n        bidInfo.preBidTokenReceivedBalance = bidInfo.receiveToken.balanceOf(address(_setToken));\\n\\n        // Validate quote asset quantity against bidder's limit.\\n        _validateQuoteAssetQuantity(\\n            bidInfo.isSellAuction,\\n            quoteAssetQuantity,\\n            _quoteQuantityLimit,\\n            bidInfo.preBidTokenSentBalance\\n        );\\n\\n        // Calculate quantities sent and received by the Set during the bid.\\n        (bidInfo.quantitySentBySet, bidInfo.quantityReceivedBySet) = _calculateQuantitiesForBid(\\n            bidInfo.isSellAuction,\\n            _componentQuantity,\\n            quoteAssetQuantity\\n        );\\n    }\\n\\n    /**\\n     * @notice Determines tokens involved in the bid based on auction type.\\n     * @param isSellAuction       Is the auction a sell type.\\n     * @param _setToken           The SetToken involved in the rebalance.\\n     * @param _component          The component involved in the auction.\\n     * @return                    The tokens to send and receive in the bid.\\n     */\\n    function _getSendAndReceiveTokens(bool isSellAuction, ISetToken _setToken, IERC20 _component) private view returns (IERC20, IERC20) {\\n        return isSellAuction ? (_component, IERC20(rebalanceInfo[_setToken].quoteAsset)) : (IERC20(rebalanceInfo[_setToken].quoteAsset), _component);\\n    }\\n\\n    /**\\n     * @notice Calculates the quantity of quote asset involved in the bid.\\n     * @param isSellAuction        Is the auction a sell type.\\n     * @param _componentQuantity   The amount of component in the bid.\\n     * @param _componentPrice      The price of the component.\\n     * @return                     The quantity of quote asset in the bid.\\n     */\\n    function _calculateQuoteAssetQuantity(bool isSellAuction, uint256 _componentQuantity, uint256 _componentPrice) private pure returns (uint256) {\\n        return isSellAuction ? _componentQuantity.preciseMulCeil(_componentPrice) : _componentQuantity.preciseMul(_componentPrice);\\n    }\\n\\n    /**\\n     * @notice Validates the quote asset quantity against bidder's limit.\\n     * @param isSellAuction            Is the auction a sell type.\\n     * @param quoteAssetQuantity       The quantity of quote asset in the bid.\\n     * @param _quoteQuantityLimit      The max/min amount of quote asset to be spent/received.\\n     * @param preBidTokenSentBalance   The balance of tokens sent before the bid.\\n     */\\n    function _validateQuoteAssetQuantity(bool isSellAuction, uint256 quoteAssetQuantity, uint256 _quoteQuantityLimit, uint256 preBidTokenSentBalance) private pure {\\n        if (isSellAuction) {\\n            require(quoteAssetQuantity <= _quoteQuantityLimit, \\\"Quote asset quantity exceeds limit\\\");\\n        } else {\\n            require(quoteAssetQuantity >= _quoteQuantityLimit, \\\"Quote asset quantity below limit\\\");\\n            require(quoteAssetQuantity <= preBidTokenSentBalance, \\\"Insufficient quote asset balance\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the quantities sent and received by the Set during the bid.\\n     * @param isSellAuction        Is the auction a sell type.\\n     * @param _componentQuantity   The amount of component in the bid.\\n     * @param quoteAssetQuantity   The quantity of quote asset in the bid.\\n     * @return                     The quantities of tokens sent and received by the Set.\\n     */\\n    function _calculateQuantitiesForBid(bool isSellAuction, uint256 _componentQuantity, uint256 quoteAssetQuantity) private pure returns (uint256, uint256) {\\n        return isSellAuction ? (_componentQuantity, quoteAssetQuantity) : (quoteAssetQuantity, _componentQuantity);\\n    }\\n\\n    /**\\n     * @dev Calculates the size and direction of the auction for a given component. Determines whether the component\\n     * is being bought or sold and the quantity required to settle the auction.\\n     *\\n     * @param _setToken            The SetToken instance to be rebalanced.\\n     * @param _component           The component whose auction size and direction need to be calculated.\\n     * @param _totalSupply         The total supply of the SetToken.\\n     *\\n     * @return isSellAuction       Indicates if this is a sell auction (true) or a buy auction (false).\\n     * @return maxComponentQty     The maximum quantity of the component to be exchanged to settle the auction.\\n     */\\n    function _calculateAuctionSizeAndDirection(\\n        ISetToken _setToken,\\n        IERC20 _component,\\n        uint256 _totalSupply\\n    )\\n        internal\\n        view\\n        returns (bool isSellAuction, uint256 maxComponentQty)\\n    {\\n        uint256 protocolFee = controller.getModuleFee(address(this), AUCTION_MODULE_V1_PROTOCOL_FEE_INDEX);\\n\\n        // Retrieve the current and target units, and notional amounts of the component\\n        (\\n            uint256 currentUnit,\\n            uint256 targetUnit,\\n            uint256 currentNotional,\\n            uint256 targetNotional\\n        ) = _getUnitsAndNotionalAmounts(_setToken, _component, _totalSupply);\\n\\n        // Ensure that the current unit and target unit are not the same\\n        require(currentUnit != targetUnit, \\\"Target already met\\\");\\n\\n        // Determine whether the component is being sold (sendToken) or bought\\n        isSellAuction = targetNotional < currentNotional;\\n\\n        // Calculate the max quantity of the component to be exchanged. If buying, account for the protocol fees.\\n        maxComponentQty = isSellAuction\\n            ? currentNotional.sub(targetNotional)\\n            : targetNotional.sub(currentNotional).preciseDiv(PreciseUnitMath.preciseUnit().sub(protocolFee));\\n    }\\n\\n      /**\\n     * @dev Executes the bid by performing token transfers.\\n     *\\n     * @param _bidInfo      Struct containing the bid information.\\n     */\\n    function _executeBid(\\n        BidInfo memory _bidInfo\\n    )\\n        internal\\n    {\\n        // Transfer the received tokens from the sender to the SetToken.\\n        transferFrom(\\n            _bidInfo.receiveToken,\\n            msg.sender,\\n            address(_bidInfo.setToken),\\n            _bidInfo.quantityReceivedBySet\\n        );\\n\\n        // Invoke the transfer of the sent tokens from the SetToken to the sender.\\n        _bidInfo.setToken.strictInvokeTransfer(\\n            address(_bidInfo.sendToken),\\n            msg.sender,\\n            _bidInfo.quantitySentBySet\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculates the protocol fee based on the tokens received during the bid and transfers it\\n     * from the SetToken to the protocol recipient.\\n     *\\n     * @param _bidInfo  Struct containing information related to the bid.\\n     *\\n     * @return uint256  The amount of the received tokens taken as a protocol fee.\\n     */\\n    function _accrueProtocolFee(BidInfo memory _bidInfo) internal returns (uint256) {\\n        IERC20 receiveToken = IERC20(_bidInfo.receiveToken);\\n        ISetToken setToken = _bidInfo.setToken;\\n\\n        // Calculate the amount of tokens exchanged during the bid.\\n        uint256 exchangedQuantity = receiveToken.balanceOf(address(setToken))\\n            .sub(_bidInfo.preBidTokenReceivedBalance);\\n\\n        // Calculate the protocol fee.\\n        uint256 protocolFee = getModuleFee(AUCTION_MODULE_V1_PROTOCOL_FEE_INDEX, exchangedQuantity);\\n\\n        // Transfer the protocol fee from the SetToken to the protocol recipient.\\n        payProtocolFeeFromSetToken(setToken, address(_bidInfo.receiveToken), protocolFee);\\n\\n        return protocolFee;\\n    }\\n\\n    /**\\n     * @dev Updates the positions of the SetToken after the bid. This function should be called\\n     * after the protocol fees have been accrued. It calculates and returns the net amount of tokens\\n     * used and received during the bid.\\n     *\\n     * @param _bidInfo  Struct containing information related to the bid.\\n     *\\n     * @return uint256  The net amount of send tokens used in the bid.\\n     * @return uint256  The net amount of receive tokens after accounting for protocol fees.\\n     */\\n    function _updatePositionState(BidInfo memory _bidInfo)\\n        internal\\n        returns (uint256, uint256)\\n    {\\n        ISetToken setToken = _bidInfo.setToken;\\n\\n        // Calculate and update positions for send tokens.\\n        (uint256 postBidSendTokenBalance,,) = setToken.calculateAndEditDefaultPosition(\\n            address(_bidInfo.sendToken),\\n            _bidInfo.setTotalSupply,\\n            _bidInfo.preBidTokenSentBalance\\n        );\\n\\n        // Calculate and update positions for receive tokens.\\n        (uint256 postBidReceiveTokenBalance,,) = setToken.calculateAndEditDefaultPosition(\\n            address(_bidInfo.receiveToken),\\n            _bidInfo.setTotalSupply,\\n            _bidInfo.preBidTokenReceivedBalance\\n        );\\n\\n        // Calculate the net amount of tokens used and received.\\n        uint256 netSendAmount = _bidInfo.preBidTokenSentBalance.sub(postBidSendTokenBalance);\\n        uint256 netReceiveAmount = postBidReceiveTokenBalance.sub(_bidInfo.preBidTokenReceivedBalance);\\n\\n        return (netSendAmount, netReceiveAmount);\\n    }\\n\\n    /**\\n     * @dev Retrieves the unit and notional amount values for the current position and target.\\n     * These are necessary to calculate the bid size and direction.\\n     *\\n     * @param _setToken             Instance of the SetToken to be rebalanced.\\n     * @param _component            The component to calculate notional amounts for.\\n     * @param _totalSupply          SetToken total supply.\\n     *\\n     * @return uint256              Current default position real unit of the component.\\n     * @return uint256              Normalized unit of the bid target.\\n     * @return uint256              Current notional amount, based on total notional amount of SetToken default position.\\n     * @return uint256              Target notional amount, based on total SetToken supply multiplied by targetUnit.\\n     */\\n    function _getUnitsAndNotionalAmounts(\\n        ISetToken _setToken,\\n        IERC20 _component,\\n        uint256 _totalSupply\\n    )\\n        internal\\n        view\\n        returns (uint256, uint256, uint256, uint256)\\n    {\\n        uint256 currentUnit = _getDefaultPositionRealUnit(_setToken, _component);\\n        uint256 targetUnit = _getNormalizedTargetUnit(_setToken, _component);\\n\\n        uint256 currentNotionalAmount = _totalSupply.getDefaultTotalNotional(currentUnit);\\n        uint256 targetNotionalAmount = _totalSupply.preciseMulCeil(targetUnit);\\n\\n        return (currentUnit, targetUnit, currentNotionalAmount, targetNotionalAmount);\\n    }\\n\\n    /**\\n     * @dev Checks if all target units for components have been met.\\n     *\\n     * @param _setToken        Instance of the SetToken to be rebalanced.\\n     *\\n     * @return bool            True if all component's target units have been met; false otherwise.\\n     */\\n    function _allTargetsMet(ISetToken _setToken) internal view returns (bool) {\\n        address[] memory rebalanceComponents = rebalanceInfo[_setToken].rebalanceComponents;\\n\\n        for (uint256 i = 0; i < rebalanceComponents.length; i++) {\\n            if (_targetUnmet(_setToken, rebalanceComponents[i])) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines if the target units for a given component are met. Takes into account minor rounding errors.\\n     * WETH is not checked as it is allowed to float around its target.\\n     *\\n     * @param _setToken        Instance of the SetToken to be rebalanced.\\n     * @param _component       Component whose target is evaluated.\\n     *\\n     * @return bool            True if component's target units are met; false otherwise.\\n     */\\n    function _targetUnmet(\\n        ISetToken _setToken,\\n        address _component\\n    )\\n        internal\\n        view\\n        returns(bool)\\n    {\\n        if (_component == address(rebalanceInfo[_setToken].quoteAsset)) return false;\\n\\n        uint256 normalizedTargetUnit = _getNormalizedTargetUnit(_setToken, IERC20(_component));\\n        uint256 currentUnit = _getDefaultPositionRealUnit(_setToken, IERC20(_component));\\n\\n        return (normalizedTargetUnit > 0)\\n            ? !normalizedTargetUnit.approximatelyEquals(currentUnit, 1)\\n            : normalizedTargetUnit != currentUnit;\\n    }\\n\\n    /**\\n     * @dev Retrieves the SetToken's default position real unit.\\n     *\\n     * @param _setToken        Instance of the SetToken.\\n     * @param _component       Component to fetch the default position for.\\n     *\\n     * @return uint256         Real unit position.\\n     */\\n    function _getDefaultPositionRealUnit(\\n        ISetToken _setToken,\\n        IERC20 _component\\n    )\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _setToken.getDefaultPositionRealUnit(address(_component)).toUint256();\\n    }\\n\\n    /**\\n     * @dev Calculates and retrieves the normalized target unit value for a given component.\\n     *\\n     * @param _setToken        Instance of the SetToken.\\n     * @param _component       Component whose normalized target unit is required.\\n     *\\n     * @return uint256         Normalized target unit of the component.\\n     */\\n    function _getNormalizedTargetUnit(\\n        ISetToken _setToken,\\n        IERC20 _component\\n    )\\n        internal\\n        view\\n        returns(uint256)\\n    {\\n        // (targetUnit * current position multiplier) / position multiplier at the start of rebalance\\n        return executionInfo[_setToken][_component]\\n            .targetUnit\\n            .mul(_setToken.positionMultiplier().toUint256())\\n            .div(rebalanceInfo[_setToken].positionMultiplier);\\n    }\\n\\n    /**\\n     * @dev Checks if the specified address is allowed to call the bid for the SetToken.\\n     * If `anyoneBid` is set to true, any address is allowed, otherwise the address\\n     * must be explicitly approved.\\n     *\\n     * @param _setToken         Instance of the SetToken to be rebalanced.\\n     * @param _bidder           Address of the bidder.\\n     *\\n     * @return bool             True if the address is allowed to bid, false otherwise.\\n     */\\n    function _isAllowedBidder(\\n        ISetToken _setToken,\\n        address _bidder\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        BidPermissionInfo storage permissions = permissionInfo[_setToken];\\n        return permissions.isAnyoneAllowedToBid || permissions.bidAllowList[_bidder];\\n    }\\n\\n    /**\\n     * @dev Updates the permission status of a bidder and maintains a history. This function adds\\n     * the bidder to the history if being permissioned, and removes it if being unpermissioned.\\n     * Ensures that AddressArrayUtils does not throw by verifying the presence of the address\\n     * before removal.\\n     *\\n     * @param _setToken         Instance of the SetToken.\\n     * @param _bidder           Address of the bidder whose permission is being updated.\\n     * @param _status           The permission status being set (true for permissioned, false for unpermissioned).\\n     */\\n    function _updateBiddersHistory(\\n        ISetToken _setToken,\\n        address _bidder,\\n        bool _status\\n    )\\n        internal\\n    {\\n        if (_status && !permissionInfo[_setToken].biddersHistory.contains(_bidder)) {\\n            permissionInfo[_setToken].biddersHistory.push(_bidder);\\n        } else if(!_status && permissionInfo[_setToken].biddersHistory.contains(_bidder)) {\\n            permissionInfo[_setToken].biddersHistory.removeStorage(_bidder);\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if the rebalance duration has elapsed for the given SetToken.\\n     *\\n     * @param _setToken The SetToken whose rebalance duration is being checked.\\n     * @return bool True if the rebalance duration has elapsed; false otherwise.\\n     */\\n    function _isRebalanceDurationElapsed(ISetToken _setToken) internal view returns (bool) {\\n        RebalanceInfo storage rebalance = rebalanceInfo[_setToken];\\n        return (rebalance.rebalanceStartTime.add(rebalance.rebalanceDuration)) <= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Checks if the conditions for early unlock are met.\\n     *\\n     * @param _setToken The SetToken being checked.\\n     * @return bool True if early unlock conditions are met; false otherwise.\\n     */\\n    function _canUnlockEarly(ISetToken _setToken) internal view returns (bool) {\\n        RebalanceInfo storage rebalance = rebalanceInfo[_setToken];\\n        return _allTargetsMet(_setToken) && _isQuoteAssetExcessOrAtTarget(_setToken) && rebalance.raiseTargetPercentage == 0;\\n    }\\n\\n    /**\\n     * @dev Checks if the quote asset is in excess or at target.\\n     *\\n     * @param _setToken The SetToken being checked.\\n     * @return bool True if the quote asset is in excess or at target; false otherwise.\\n     */\\n    function _isQuoteAssetExcessOrAtTarget(ISetToken _setToken) internal view returns (bool) {\\n        RebalanceInfo storage rebalance = rebalanceInfo[_setToken];\\n        bool isExcess = _getDefaultPositionRealUnit(_setToken, rebalance.quoteAsset) > _getNormalizedTargetUnit(_setToken, rebalance.quoteAsset);\\n        bool isAtTarget = _getDefaultPositionRealUnit(_setToken, rebalance.quoteAsset).approximatelyEquals(_getNormalizedTargetUnit(_setToken, rebalance.quoteAsset), 1);\\n        return isExcess || isAtTarget;\\n    }\\n\\n    /**\\n     * @dev Checks if the conditions to raise asset targets are met.\\n     *\\n     * @param _setToken The SetToken being checked.\\n     * @return bool True if conditions to raise asset targets are met; false otherwise.\\n     */\\n    function _canRaiseAssetTargets(ISetToken _setToken) internal view returns (bool) {\\n        RebalanceInfo storage rebalance = rebalanceInfo[_setToken];\\n        bool isQuoteAssetExcess = _getDefaultPositionRealUnit(_setToken, rebalance.quoteAsset) > _getNormalizedTargetUnit(_setToken, rebalance.quoteAsset);\\n        return _allTargetsMet(_setToken) && isQuoteAssetExcess;\\n    }\\n\\n    /**\\n     * @dev Retrieves the price adapter address for a component after verifying its existence\\n     * in the IntegrationRegistry. This function ensures the validity of the adapter during a bid.\\n     *\\n     * @param _setToken        Instance of the SetToken to be rebalanced.\\n     * @param _component       Component whose price adapter is to be fetched.\\n     *\\n     * @return IAuctionPriceAdapter    The price adapter's address.\\n     */\\n    function _getAuctionPriceAdapter(\\n        ISetToken _setToken,\\n        IERC20 _component\\n    )\\n        internal\\n        view\\n        returns(IAuctionPriceAdapterV1)\\n    {\\n        return IAuctionPriceAdapterV1(getAndValidateAdapter(executionInfo[_setToken][_component].priceAdapterName));\\n    }\\n\\n    /**\\n     * @dev Concatenates two arrays of AuctionExecutionParams after validating them.\\n     *\\n     * @param _oldAuctionParams     The first array of AuctionExecutionParams.\\n     * @param _newAuctionParams     The second array of AuctionExecutionParams.\\n     * @return concatenatedParams   The concatenated array of AuctionExecutionParams.\\n     */\\n    function _concatAndValidateAuctionParams(\\n        AuctionExecutionParams[] memory _oldAuctionParams,\\n        AuctionExecutionParams[] memory _newAuctionParams\\n    )\\n        internal\\n        view\\n        returns (AuctionExecutionParams[] memory concatenatedParams)\\n    {\\n        uint256 oldLength = _oldAuctionParams.length;\\n        uint256 newLength = _newAuctionParams.length;\\n\\n        // Initialize the concatenated array with the combined size of the input arrays\\n        concatenatedParams = new AuctionExecutionParams[](oldLength + newLength);\\n\\n        // Copy and validate the old auction params\\n        for (uint256 i = 0; i < oldLength; i++) {\\n            _validateAuctionExecutionPriceParams(_oldAuctionParams[i]);\\n            concatenatedParams[i] = _oldAuctionParams[i];\\n        }\\n\\n        // Append and validate the new auction params\\n        for (uint256 j = 0; j < newLength; j++) {\\n            require(_newAuctionParams[j].targetUnit > 0, \\\"New component target unit must be greater than 0\\\");\\n            _validateAuctionExecutionPriceParams(_newAuctionParams[j]);\\n            concatenatedParams[oldLength + j] = _newAuctionParams[j];\\n        }\\n\\n        return concatenatedParams;\\n    }\\n\\n    /**\\n     * @dev Validates the given auction execution price adapter params.\\n     *\\n     * @param auctionParams The auction parameters to validate.\\n     */\\n    function _validateAuctionExecutionPriceParams(AuctionExecutionParams memory auctionParams) internal view {\\n        IAuctionPriceAdapterV1 adapter = IAuctionPriceAdapterV1(getAndValidateAdapter(auctionParams.priceAdapterName));\\n        require(adapter.isPriceAdapterConfigDataValid(auctionParams.priceAdapterConfigData), \\\"Price adapter config data invalid\\\");\\n    }\\n\\n    /* ============== Modifier Helpers ===============\\n     * Internal functions used to reduce bytecode size\\n     */\\n\\n    /*\\n     * Bidder must be permissioned for SetToken\\n     */\\n    function _validateOnlyAllowedBidder(ISetToken _setToken) internal view {\\n        require(_isAllowedBidder(_setToken, msg.sender), \\\"Address not permitted to bid\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5424978104154bd9067df5374c3db2d64d4498e24bed7f27b9314c2f53f53df9\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Compatible with StreamingFeeModule and BasicIssuanceModule. Review compatibility if used with additional modules.WARNING: If rebalances don't lock the SetToken, there's potential for bids to be front-run by sizable issuance/redemption. This could lead to the SetToken not approaching its target allocation proportionately to the bid size. To counteract this risk, a supply cap can be applied to the SetToken, allowing regular issuance/redemption while preventing front-running with large issuance/redemption.WARNING: This contract does NOT support ERC-777 component tokens or quote assets.WARNING: Please note that the behavior of block.timestamp varies across different EVM chains. This contract does not incorporate additional checks for unique behavior or for elements like sequencer uptime. Ensure you understand these characteristics when interacting with the contract on different EVM chains.",
    "methods": {
      "allTargetsMet(address)": {
        "details": "Checks externally if all target units for components have been met.",
        "params": {
          "_setToken": "Instance of the SetToken to be rebalanced."
        },
        "returns": {
          "_0": "bool True if all component's target units have been met; false otherwise."
        }
      },
      "bid(address,address,address,uint256,uint256,bool)": {
        "details": "ACCESS LIMITED: Only approved addresses can call this function unless isAnyoneAllowedToBid is enabled. This function is used to push the current component units closer to the target units defined in startRebalance(). Bidders specify the amount of the component they intend to buy or sell, and also specify the maximum/minimum amount of the quote asset they are willing to spend/receive. If the component amount is max uint256, the bid will fill the remaining amount to reach the target. The auction parameters, which are set by the manager, are used to determine the price of the component. Any bids that either don't move the component units towards the target, or overshoot the target, will be reverted. If protocol fees are enabled, they are collected in the token received in a bid. SELL AUCTIONS: At the start of the rebalance, sell auctions are available to be filled in their full size. BUY AUCTIONS: Buy auctions can be filled up to the amount of quote asset available in the SetToken. This means that if the SetToken does not contain the quote asset as a component, buy auctions cannot be bid on until sell auctions have been executed and there is quote asset available in the SetToken.",
        "params": {
          "_component": "The component for which the auction is to be bid on.",
          "_componentAmount": "The amount of component in the bid.",
          "_isSellAuction": "The direction of the auction expected by the bidder",
          "_quoteAsset": "The ERC20 token expected to be used as the quote asset by the bidder",
          "_quoteAssetLimit": "The maximum or minimum amount of quote asset that can be spent or received during the bid.",
          "_setToken": "The SetToken to be rebalanced."
        }
      },
      "canRaiseAssetTargets(address)": {
        "details": "Checks externally if the conditions to raise asset targets are met.",
        "params": {
          "_setToken": "The SetToken being checked."
        },
        "returns": {
          "_0": "bool True if conditions to raise asset targets are met; false otherwise."
        }
      },
      "canUnlockEarly(address)": {
        "details": "Checks externally if the conditions for early unlock are met.",
        "params": {
          "_setToken": "The SetToken being checked."
        },
        "returns": {
          "_0": "bool True if early unlock conditions are met; false otherwise."
        }
      },
      "getAllowedBidders(address)": {
        "details": "Retrieves the list of addresses that are permitted to participate in the auction by calling `bid()`.",
        "params": {
          "_setToken": "Instance of the SetToken for which to retrieve the list of allowed bidders."
        },
        "returns": {
          "_0": "address[]          Array of addresses representing the allowed bidders."
        }
      },
      "getAuctionSizeAndDirection(address,address)": {
        "details": "Calculates the quantity of a component involved in the rebalancing of the given SetToken, and determines if the component is being bought or sold.",
        "params": {
          "_component": "Instance of the IERC20 component to bid on.",
          "_setToken": "Instance of the SetToken being rebalanced."
        },
        "returns": {
          "componentQuantity": "  Quantity of the component involved in the bid.",
          "isSellAuction": "      Indicates if this is a sell auction (true) or a buy auction (false)."
        }
      },
      "getBidPreview(address,address,address,uint256,uint256,bool)": {
        "details": "Generates a preview of the bid for a given component in the rebalancing of the SetToken. It calculates the quantity of the component that will be exchanged and the direction of exchange.",
        "params": {
          "_component": "Instance of the component auction to bid on.",
          "_componentQuantity": "Quantity of the component involved in the bid.",
          "_isSellAuction": "The direction of the auction expected by the bidder",
          "_quoteAsset": "The ERC20 token expected to be used as the quote asset by the bidder",
          "_quoteQuantityLimit": "Maximum or minimum amount of quote asset spent or received during the bid.",
          "_setToken": "Instance of the SetToken being rebalanced."
        },
        "returns": {
          "_0": "BidInfo              Struct containing data for the bid."
        }
      },
      "getQuoteAssetBalance(address)": {
        "details": "Retrieves the balance of the quote asset for a given SetToken.",
        "params": {
          "_setToken": "The SetToken whose quote asset balance is being retrieved."
        },
        "returns": {
          "_0": "uint256 The balance of the quote asset."
        }
      },
      "getRebalanceComponents(address)": {
        "details": "Retrieves the array of components that are involved in the rebalancing of the given SetToken.",
        "params": {
          "_setToken": "Instance of the SetToken."
        },
        "returns": {
          "_0": "address[]   Array of component addresses involved in the rebalance."
        }
      },
      "initialize(address)": {
        "details": "MANAGER ONLY: Initializes the module for a SetToken, enabling access to AuctionModuleV1 for rebalances. Retrieves the current units for each asset in the Set and sets the targetUnit to match the current unit, effectively preventing any bidding until `startRebalance()` is explicitly called. The position multiplier is also logged to ensure that any changes to the position multiplier do not unintentionally open the Set for rebalancing.",
        "params": {
          "_setToken": "Address of the Set Token"
        }
      },
      "isAllowedBidder(address,address)": {
        "details": "Determines whether the given bidder address is allowed to participate in the auction.",
        "params": {
          "_bidder": "Address of the bidder.",
          "_setToken": "Instance of the SetToken for which the bid is being placed."
        },
        "returns": {
          "_0": "bool       True if the given `_bidder` is permitted to bid, false otherwise."
        }
      },
      "isQuoteAssetExcessOrAtTarget(address)": {
        "details": "Checks externally if the quote asset is in excess or at target.",
        "params": {
          "_setToken": "The SetToken being checked."
        },
        "returns": {
          "_0": "bool True if the quote asset is in excess or at target; false otherwise."
        }
      },
      "isRebalanceDurationElapsed(address)": {
        "details": "Checks externally if the rebalance duration has elapsed for the given SetToken.",
        "params": {
          "_setToken": "The SetToken whose rebalance duration is being checked."
        },
        "returns": {
          "_0": "bool True if the rebalance duration has elapsed; false otherwise."
        }
      },
      "raiseAssetTargets(address)": {
        "details": "ACCESS LIMITED: Increases asset targets uniformly when all target units have been met but there is remaining quote asset. Can be called multiple times if necessary. Targets are increased by the percentage specified by raiseAssetTargetsPercentage set by the manager. This helps in reducing tracking error and providing greater granularity in reaching an equilibrium between the excess quote asset and the components to be purchased. However, excessively raising targets may result in under-allocating to the quote asset as more of it is spent buying components to meet the new targets.",
        "params": {
          "_setToken": "The SetToken to be rebalanced."
        }
      },
      "removeModule()": {
        "details": "Called by a SetToken to notify that this module was removed from the SetToken. Clears the `rebalanceInfo` and `permissionsInfo` of the calling SetToken. IMPORTANT: The auction execution settings of the SetToken, including auction parameters, are NOT DELETED. Restoring a previously removed module requires careful initialization of the execution settings."
      },
      "setAnyoneBid(address,bool)": {
        "details": "MANAGER ONLY: Toggles whether or not anyone is allowed to call the `bid()` function. If set to true, it bypasses the bidAllowList, allowing any address to call the `bid()` function. The manager can call this function at any time.",
        "params": {
          "_setToken": "The SetToken instance.",
          "_status": "A boolean indicating if anyone can bid."
        }
      },
      "setBidderStatus(address,address[],bool[])": {
        "details": "MANAGER ONLY: Toggles the permission status of specified addresses to call the `bid()` function. The manager can call this function at any time.",
        "params": {
          "_bidders": "An array of addresses whose bidding permission status is to be toggled.",
          "_setToken": "The SetToken being rebalanced.",
          "_statuses": "An array of booleans indicating the new bidding permission status for each corresponding address in `_bidders`."
        }
      },
      "setRaiseTargetPercentage(address,uint256)": {
        "details": "MANAGER ONLY: Sets the percentage by which the target units for all components can be increased. Can be called at any time by the manager.",
        "params": {
          "_raiseTargetPercentage": "The percentage (in precise units) by which the target units can be increased.",
          "_setToken": "The SetToken to be rebalanced."
        }
      },
      "startRebalance(address,address,address[],(uint256,string,bytes)[],(uint256,string,bytes)[],bool,uint256,uint256)": {
        "details": "MANAGER ONLY: Initiates the rebalance process by setting target allocations for the SetToken. Opens auctions for filling by the Set's designated bidders. The function takes in new components to be added with their target units and existing components with updated target units (set to 0 if removing). A positionMultiplier is supplied to adjust target units, e.g., in cases where fee accrual affects the positionMultiplier of the SetToken, ensuring proportional allocation among components. If target allocations are not met within the specified duration, the rebalance concludes with the allocations achieved.WARNING: If rebalances don't lock the SetToken, enforce a supply cap on the SetToken to prevent front-running.",
        "params": {
          "_initialPositionMultiplier": "Position multiplier at the start of the rebalance.",
          "_newComponents": "Addresses of new components to be added.",
          "_newComponentsAuctionParams": "AuctionExecutionParams for new components, indexed corresponding to _newComponents.",
          "_oldComponentsAuctionParams": "AuctionExecutionParams for existing components, indexed corresponding to                                      the current component positions. Set to 0 for components being removed.",
          "_quoteAsset": "ERC20 token used as the quote asset in auctions.",
          "_rebalanceDuration": "Duration of the rebalance in seconds.",
          "_setToken": "The SetToken to be rebalanced.",
          "_shouldLockSetToken": "Indicates if the rebalance should lock the SetToken."
        }
      },
      "unlock(address)": {
        "details": "Unlocks the SetToken after rebalancing. Can be called once the rebalance duration has elapsed. Can only be called before the rebalance duration has elapsed if all targets are met, there is excess or at-target quote asset, and raiseTargetPercentage is zero. Resets the raiseTargetPercentage to zero.",
        "params": {
          "_setToken": "The SetToken to be unlocked."
        }
      }
    },
    "title": "AuctionRebalanceModuleV1"
  },
  "userdoc": {
    "methods": {},
    "notice": "Facilitates rebalances for index sets via single-asset auctions. Managers initiate rebalances specifying target allocations in precise units (scaled by 10^18), quote asset (e.g., WETH, USDC), auction parameters per component, and rebalance duration through startRebalance(). Bidders can participate via bid() for individual components. Excess quote asset can be managed by proportionally increasing the targets using raiseAssetTargets()."
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3554,
        "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IController)2262"
      },
      {
        "astId": 1840,
        "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5259,
        "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
        "label": "executionInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_contract(ISetToken)2637,t_mapping(t_contract(IERC20)1297,t_struct(AuctionExecutionParams)5120_storage))"
      },
      {
        "astId": 5263,
        "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
        "label": "permissionInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(ISetToken)2637,t_struct(BidPermissionInfo)5130_storage)"
      },
      {
        "astId": 5267,
        "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
        "label": "rebalanceInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(ISetToken)2637,t_struct(RebalanceInfo)5144_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IController)2262": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1297": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISetToken)2637": {
        "encoding": "inplace",
        "label": "contract ISetToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)1297,t_struct(AuctionExecutionParams)5120_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1297",
        "label": "mapping(contract IERC20 => struct AuctionRebalanceModuleV1.AuctionExecutionParams)",
        "numberOfBytes": "32",
        "value": "t_struct(AuctionExecutionParams)5120_storage"
      },
      "t_mapping(t_contract(ISetToken)2637,t_mapping(t_contract(IERC20)1297,t_struct(AuctionExecutionParams)5120_storage))": {
        "encoding": "mapping",
        "key": "t_contract(ISetToken)2637",
        "label": "mapping(contract ISetToken => mapping(contract IERC20 => struct AuctionRebalanceModuleV1.AuctionExecutionParams))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1297,t_struct(AuctionExecutionParams)5120_storage)"
      },
      "t_mapping(t_contract(ISetToken)2637,t_struct(BidPermissionInfo)5130_storage)": {
        "encoding": "mapping",
        "key": "t_contract(ISetToken)2637",
        "label": "mapping(contract ISetToken => struct AuctionRebalanceModuleV1.BidPermissionInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BidPermissionInfo)5130_storage"
      },
      "t_mapping(t_contract(ISetToken)2637,t_struct(RebalanceInfo)5144_storage)": {
        "encoding": "mapping",
        "key": "t_contract(ISetToken)2637",
        "label": "mapping(contract ISetToken => struct AuctionRebalanceModuleV1.RebalanceInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RebalanceInfo)5144_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AuctionExecutionParams)5120_storage": {
        "encoding": "inplace",
        "label": "struct AuctionRebalanceModuleV1.AuctionExecutionParams",
        "members": [
          {
            "astId": 5115,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "targetUnit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5117,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "priceAdapterName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 5119,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "priceAdapterConfigData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(BidPermissionInfo)5130_storage": {
        "encoding": "inplace",
        "label": "struct AuctionRebalanceModuleV1.BidPermissionInfo",
        "members": [
          {
            "astId": 5122,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "isAnyoneAllowedToBid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5125,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "biddersHistory",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5129,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "bidAllowList",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RebalanceInfo)5144_storage": {
        "encoding": "inplace",
        "label": "struct AuctionRebalanceModuleV1.RebalanceInfo",
        "members": [
          {
            "astId": 5132,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "quoteAsset",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1297"
          },
          {
            "astId": 5134,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "rebalanceStartTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5136,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "rebalanceDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5138,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "positionMultiplier",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5140,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "raiseTargetPercentage",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5143,
            "contract": "contracts/modules/AuctionRebalanceModuleV1.sol:AuctionRebalanceModuleV1",
            "label": "rebalanceComponents",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}