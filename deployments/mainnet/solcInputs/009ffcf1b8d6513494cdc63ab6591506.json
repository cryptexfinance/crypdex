{
  "language": "Solidity",
  "sources": {
    "@openzeppelin-contracts-5/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin-contracts-5/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin-contracts-5/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin-contracts-5/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin-contracts-5/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin-contracts-5/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/extensions/TokenExchangeSetIssuer.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.26;\n\nimport {IERC20} from \"@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin-contracts-5/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin-contracts-5/contracts/utils/ReentrancyGuard.sol\";\nimport {Ownable} from \"@openzeppelin-contracts-5/contracts/access/Ownable.sol\";\nimport {ISetToken} from \"../interfaces/v0.8/ISetToken.sol\";\nimport {IIssuanceModule} from \"../interfaces/v0.8/IIssuanceModule.sol\";\n\n/// @title TokenExchangeSetIssuer\n/// @author Cryptex Finance\n/// @dev Note:\n/// - This is a peripheral contract that helps users buy the underlying components\n///   of the SetTokens and then issues the SetToken to the user.\n///   It also allows users to redeem their SetTokens for a single asset.\n/// - For buying and selling, exchanges like Paraswap or Uniswap will be used,\n///   and the payload should be constructed by an interface, such as a UI.\n/// @notice WARNING: Do not send funds directly to this contract. This contract does not handle\n///         receiving ETH or ERC20 tokens directly. Sending funds here may result in a loss.\n/// @notice WARNING: Any dust (small amounts) left over from the swap of components during\n///         buy or sell operations will not be refunded. Users are advised to use swap functions\n///         that avoid or minimize dust accumulation.\ncontract TokenExchangeSetIssuer is Ownable, ReentrancyGuard {\n    /// @dev Maps each SetToken to its associated authorized IIssuanceModule.\n    ///      This mapping serves two purposes:\n    ///      1. To verify whether a SetToken is authorized.\n    ///      2. To retrieve the corresponding IIssuanceModule for a given SetToken.\n    mapping(address => address) public setTokenIssuanceModules;\n    /// @dev Mapping of whitelisted function for a target contract.\n    mapping(bytes24 => bool) public whitelistedFunctions;\n\n    /// @notice Thrown when the quantity of the Set token for buying or selling is zero.\n    error SetQuantityCannotBeZero();\n    /// @notice Thrown when the quote asset amount for buying or selling is zero.\n    error QuoteAmountCannotBeZero();\n    /// @notice Thrown when the target address provided is the zero address.\n    error TargetAddressCannotBeZero();\n    /// @notice Thrown when the Set token address provided is the zero address.\n    error SetAddressCannotBeZero();\n    /// @notice Thrown when the issuance module address provided is the zero address.\n    error IssuanceAddressCannotBeZero();\n    /// @notice Thrown when the amount received from selling the Set token is less than expected.\n    error ReceivedAmountLessThanExpected();\n    /// @notice Thrown when attempting to call or revoke a non-whitelisted function.\n    error FunctionNotWhitelisted();\n    /// @notice Thrown when ETH is sent to the contract.\n    error ETHNotAccepted();\n    /// @notice Thrown when attempting to buy or sell a Set token that is not whitelisted.\n    error SetTokenNotWhitelisted();\n    /// @notice Thrown when the number of exchanges does not match the number of Set token components.\n    error ExchangeLengthMismatch();\n    /// @notice Thrown when the length of the exchange payload does not match the number of Set token components.\n    error PayloadLengthMismatch();\n    /// @notice Thrown when a call to an exchange fails.\n    error ExchangeCallFailed();\n    /// @notice Thrown when the amount of Set token components bought is insufficient for issuing the desired\n    ///         quantity of the Set token.\n    error QuantityBoughtLessThanMinimum();\n    /// @notice Thrown when the length of the payload for buying or selling tokens is less than 4 bytes.\n    error InvalidPayload();\n\n    /// @notice Emitted when a function is whitelisted for a specific target contract.\n    /// @param target The address of the target contract.\n    /// @param selector The 4 byte function selector that has been whitelisted.\n    event FunctionWhitelisted(address target, bytes4 selector);\n    /// @notice Emitted when a previously whitelisted function is revoked for a specific target contract.\n    /// @param target The address of the target contract.\n    /// @param selector The 4 byte function selector that has been revoked.\n    event FunctionRevoked(address target, bytes4 selector);\n    /// @notice Emitted when an IssuanceModule is added to a SetToken.\n    /// @param setToken The address of the SetToken.\n    /// @param issuanceModule The address of the IssuanceModule that was added.\n    event IssuanceModuleAdded(address setToken, address issuanceModule);\n    /// @notice Emitted when an IssuanceModule is removed from a SetToken.\n    /// @param setToken The address of the SetToken.\n    /// @param issuanceModule The address of the IssuanceModule that was removed.\n    event IssuanceModuleRemoved(address setToken, address issuanceModule);\n\n    constructor(address owner) Ownable(owner) {}\n\n    /// @notice Buys the underlying components of the SetToken and issues the SetToken.\n    /// @dev To buy the underlying components, the payload needs to be constructed for the whitelisted exchanges.\n    /// @param setToken: The instance of the SetToken contract.\n    /// @param setTokenQuantity: The quantity of the SetToken to issue.\n    /// @param quoteAsset: The instance of the IERC20 token used for buying the underlying components.\n    /// @param totalQuoteAmount: The maximum amount the user pays for buying the underlying components.\n    /// @param exchanges: An array of addresses used to buy each component.\n    /// @param exchangePayloads: Payloads targeted towards each exchange for buying the corresponding component.\n    /// @return extraQuoteBalance The remaining quote balance after the purchase and issuance.\n    /// @notice WARNING: Dust (small amounts) of the `quoteAsset` may remain after the operation\n    ///         and will not be refunded to the user. Users should use swap functions that do not leave dust.\n    function buyComponentsAndIssueSetToken(\n        ISetToken setToken,\n        uint256 setTokenQuantity,\n        IERC20 quoteAsset,\n        uint256 totalQuoteAmount,\n        address[] calldata exchanges,\n        bytes[] calldata exchangePayloads\n    ) external nonReentrant returns (uint256 extraQuoteBalance) {\n        if (setTokenQuantity == 0) revert SetQuantityCannotBeZero();\n        if (totalQuoteAmount == 0) revert QuoteAmountCannotBeZero();\n        uint256 beforeQuoteAssetBalance = quoteAsset.balanceOf(address(this));\n        SafeERC20.safeTransferFrom(quoteAsset, msg.sender, address(this), totalQuoteAmount);\n        IIssuanceModule issuanceModule = _getIssuanceModule(setToken);\n        _buyComponents(setToken, setTokenQuantity, quoteAsset, issuanceModule, exchanges, exchangePayloads);\n        issuanceModule.issue(setToken, setTokenQuantity, msg.sender);\n        uint256 afterQuoteAssetBalance = quoteAsset.balanceOf(address(this));\n        extraQuoteBalance = afterQuoteAssetBalance - beforeQuoteAssetBalance;\n        // refund extra quoteAsset\n        if (extraQuoteBalance > 0) {\n            SafeERC20.safeTransfer(quoteAsset, msg.sender, extraQuoteBalance);\n        }\n    }\n\n    /// @notice Redeems the SetTokens for the underlying components and then sells them for `quoteAsset`.\n    /// @dev To sell the underlying components, the payload needs to be constructed for the whitelisted exchanges.\n    /// @param setToken: Instance of the SetToken contract.\n    /// @param setTokenQuantity: Quantity of the SetToken to redeem.\n    /// @param quoteAsset: Instance of the IERC20 token received after selling the underlying components.\n    /// @param minQuoteAmount: The minimum `quoteAsset` amount the user expects to receive after selling the underlying components.\n    /// @param exchanges: An array of addresses used to sell each component.\n    /// @param exchangePayloads: Payloads targeted towards each exchange for selling the corresponding component.\n    /// @return quoteAssetBalanceAfterSell The `quoteAsset` balance obtained after selling the components.\n    /// @notice WARNING: Any dust accumulated during the selling of components will not be refunded.\n    ///         Users should ensure they use swap functions that do not leave dust.\n    function redeemSetTokenAndExchangeTokens(\n        ISetToken setToken,\n        uint256 setTokenQuantity,\n        IERC20 quoteAsset,\n        uint256 minQuoteAmount,\n        address[] calldata exchanges,\n        bytes[] calldata exchangePayloads\n    ) external nonReentrant returns (uint256 quoteAssetBalanceAfterSell) {\n        if (setTokenQuantity == 0) revert SetQuantityCannotBeZero();\n        uint256 beforeQuoteAssetBalance = quoteAsset.balanceOf(address(this));\n        SafeERC20.safeTransferFrom(IERC20(address(setToken)), msg.sender, address(this), setTokenQuantity);\n\n        IIssuanceModule issuanceModule = _getIssuanceModule(setToken);\n        issuanceModule.redeem(setToken, setTokenQuantity, address(this));\n\n        _sellComponents(setToken, setTokenQuantity, issuanceModule, quoteAsset, exchanges, exchangePayloads);\n        quoteAssetBalanceAfterSell = quoteAsset.balanceOf(address(this)) - beforeQuoteAssetBalance;\n\n        if (quoteAssetBalanceAfterSell < minQuoteAmount) revert ReceivedAmountLessThanExpected();\n\n        SafeERC20.safeTransfer(quoteAsset, msg.sender, quoteAssetBalanceAfterSell);\n        return quoteAssetBalanceAfterSell;\n    }\n\n    /// @notice Approves a specified amount of multiple ERC20 tokens for a given spender.\n    /// @dev Only the owner can call this function\n    /// @param tokens: An array of ERC20 token instances to approve.\n    /// @param spender: The address that is being approved to spend the tokens.\n    /// @param amount: The amount of each token to approve for the spender.\n    function approveTokens(IERC20[] memory tokens, address spender, uint256 amount) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            tokens[i].approve(spender, amount);\n        }\n    }\n\n    /// @notice Whitelists multiple functions for the specified target contract.\n    /// @dev This function allows the contract owner to whitelist multiple functions identified\n    ///      by their target address and function selectors. Only whitelisted functions can\n    ///      be called through the `call` function, ensuring that only approved\n    ///      functions are executed.\n    /// @param target The address of the contract that contains the functions to be whitelisted.\n    ///               Must be a valid contract address (non-zero).\n    /// @param selectors An array of function selectors (4-byte signatures) belonging to the target address.\n    ///                  Each selector represents a specific function within the target contract that is\n    ///                  being whitelisted.\n    function whitelistFunctions(address target, bytes4[] calldata selectors) external onlyOwner {\n        if (target == address(0)) revert TargetAddressCannotBeZero();\n        bytes24 identifier;\n        for (uint256 i = 0; i < selectors.length; i++) {\n            identifier = _calculateFunctionIdentifier(target, selectors[i]);\n            whitelistedFunctions[identifier] = true;\n            emit FunctionWhitelisted(target, selectors[i]);\n        }\n    }\n\n    /// @notice Removes multiple functions from the whitelist for the specified target contract.\n    /// @dev This function allows the contract owner to remove multiple functions, identified\n    ///      by their target address and function selectors, from the whitelist. Once a function\n    ///      is removed from the whitelist, it can no longer be called via the `call` function.\n    /// @param target The address of the contract that contains the functions to be removed from the whitelist.\n    /// @param selectors An array of function selectors (4-byte signatures) belonging to the target address,\n    ///                  representing the functions to be removed from the whitelist.\n    function revokeWhitelistedFunctions(address target, bytes4[] calldata selectors) external onlyOwner {\n        bytes24 identifier;\n        for (uint256 i = 0; i < selectors.length; i++) {\n            identifier = _calculateFunctionIdentifier(target, selectors[i]);\n            if (!whitelistedFunctions[identifier]) revert FunctionNotWhitelisted();\n            delete whitelistedFunctions[identifier];\n            emit FunctionRevoked(target, selectors[i]);\n        }\n    }\n\n    /// @notice Adds or updates the issuance module for a specified SetToken.\n    /// @dev This function maps a SetToken address to its corresponding issuance module. Both addresses must be non-zero.\n    /// @param setToken: The address of the SetToken for which the issuance module is being set.\n    /// @param issuanceModule: The address of the issuance module to be associated with the SetToken.\n    function addSetTokenIssuanceModules(address setToken, address issuanceModule) external onlyOwner {\n        if (setToken == address(0)) revert SetAddressCannotBeZero();\n        if (issuanceModule == address(0)) revert IssuanceAddressCannotBeZero();\n        setTokenIssuanceModules[setToken] = issuanceModule;\n        emit IssuanceModuleAdded(setToken, issuanceModule);\n    }\n\n    /// @notice Removes the issuance module associated with a specified SetToken.\n    /// @dev This function deletes the mapping between a SetToken and its issuance module.\n    /// @param setToken: The address of the SetToken for which the issuance module is being removed.\n    function removeSetTokenIssuanceModules(address setToken) external onlyOwner {\n        // _getIssuanceModule will revert if setToken is not whitelisted\n        address issuanceModule = address(_getIssuanceModule(ISetToken(setToken)));\n        delete setTokenIssuanceModules[setToken];\n        emit IssuanceModuleRemoved(setToken, issuanceModule);\n    }\n\n    /// @notice Allows the contract owner to recover any ERC20 tokens held by the contract.\n    /// @dev Safely transfers the specified amount of the given ERC20 token to the provided address.\n    /// @param token: The instance of the ERC20 token to be recovered.\n    /// @param to: The address to which the tokens will be sent.\n    /// @param amount: The amount of the token to recover and transfer.\n    function recoverTokens(IERC20 token, address to, uint256 amount) external onlyOwner {\n        SafeERC20.safeTransfer(token, to, amount);\n    }\n\n    /// @notice Fallback function to revert any ETH sent to the contract.\n    receive() external payable {\n        revert ETHNotAccepted();\n    }\n\n    /*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/\n    /*                                 private functions                                  */\n    /*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/\n\n    function _getIssuanceModule(ISetToken setToken) private view returns (IIssuanceModule) {\n        address issuanceModule = setTokenIssuanceModules[address(setToken)];\n        if (address(issuanceModule) == address(0)) revert SetTokenNotWhitelisted();\n        return IIssuanceModule(issuanceModule);\n    }\n\n    function _sellComponents(\n        ISetToken setToken,\n        uint256 setTokenQuantity,\n        IIssuanceModule issuanceModule,\n        IERC20 quoteAsset,\n        address[] calldata exchanges,\n        bytes[] calldata exchangePayloads\n    ) private {\n        (address[] memory components, ) = issuanceModule.getRequiredComponentUnitsForIssue(setToken, setTokenQuantity);\n        uint256 componentsLength = components.length;\n        if (exchanges.length != componentsLength) revert ExchangeLengthMismatch();\n        if (exchangePayloads.length != componentsLength) revert PayloadLengthMismatch();\n        bool success;\n\n        for (uint256 index = 0; index < componentsLength; index++) {\n            if (components[index] == address(quoteAsset)) continue;\n            address exchange = exchanges[index];\n            bytes calldata exchangePayload = exchangePayloads[index];\n            _requireWhitelistedFunction(exchange, exchangePayload);\n            // Wont use native asset, so no need to pass msg.value\n            (success, ) = exchange.call(exchangePayload);\n            if (!success) revert ExchangeCallFailed();\n        }\n    }\n\n    function _buyComponents(\n        ISetToken setToken,\n        uint256 setTokenQuantity,\n        IERC20 quoteAsset,\n        IIssuanceModule issuanceModule,\n        address[] calldata exchanges,\n        bytes[] calldata exchangePayloads\n    ) private {\n        bool success;\n        (address[] memory components, uint256[] memory componentQuantities) = issuanceModule\n            .getRequiredComponentUnitsForIssue(setToken, setTokenQuantity);\n        uint256 componentsLength = components.length;\n        if (exchanges.length != componentsLength) revert ExchangeLengthMismatch();\n        if (exchangePayloads.length != componentsLength) revert PayloadLengthMismatch();\n\n        for (uint256 index = 0; index < componentsLength; index++) {\n            address componentAddress = components[index];\n            if (componentAddress == address(quoteAsset)) continue;\n            IERC20 component = IERC20(componentAddress);\n            uint256 beforeComponentBalance = component.balanceOf(address(this));\n\n            address exchange = exchanges[index];\n            bytes calldata exchangePayload = exchangePayloads[index];\n            _requireWhitelistedFunction(exchange, exchangePayload);\n            // Wont use native asset, so no need to pass msg.value\n            (success, ) = exchange.call(exchangePayload);\n            if (!success) revert ExchangeCallFailed();\n\n            uint256 afterComponentBalance = component.balanceOf(address(this));\n            if (afterComponentBalance - beforeComponentBalance < componentQuantities[index])\n                revert QuantityBoughtLessThanMinimum();\n        }\n    }\n\n    function _requireWhitelistedFunction(address target, bytes calldata payload) private view {\n        if (payload.length < 4) revert InvalidPayload();\n        bytes4 selector = bytes4(payload[0:4]);\n        bytes24 identifier = _calculateFunctionIdentifier(target, selector);\n        if (!whitelistedFunctions[identifier]) revert FunctionNotWhitelisted();\n    }\n\n    function _calculateFunctionIdentifier(address target, bytes4 selector) private pure returns (bytes24 identifier) {\n        bytes memory encodedData = abi.encodePacked(target, selector);\n        identifier = bytes24(encodedData);\n    }\n}\n"
    },
    "contracts/interfaces/v0.8/external/IFlokiTaxHandler.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.26;\n\ninterface IFlokiTaxHandler {\n    function getTax(address benefactor, address beneficiary, uint256 amount) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/v0.8/external/IParaswapV6.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.26;\n\n\nstruct GenericData {\n    address srcToken;\n    address destToken;\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 quotedAmount;\n    bytes32 metadata;\n    address payable beneficiary;\n}\n\nstruct BalancerV2Data {\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 quotedAmount;\n    bytes32 metadata;\n    uint256 beneficiaryAndApproveFlag;\n}\n\nstruct CurveV1Data {\n    uint256 curveData;\n    uint256 curveAssets;\n    address srcToken;\n    address destToken;\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 quotedAmount;\n    bytes32 metadata;\n    address payable beneficiary;\n}\n\nstruct CurveV2Data {\n    uint256 curveData;\n    uint256 i;\n    uint256 j;\n    address poolAddress;\n    address srcToken;\n    address destToken;\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 quotedAmount;\n    bytes32 metadata;\n    address payable beneficiary;\n}\n\nstruct UniswapV2Data {\n    address srcToken;\n    address destToken;\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 quotedAmount;\n    bytes32 metadata;\n    address payable beneficiary;\n    bytes pools;\n}\n\nstruct UniswapV3Data {\n    address srcToken;\n    address destToken;\n    uint256 fromAmount;\n    uint256 toAmount;\n    uint256 quotedAmount;\n    bytes32 metadata;\n    address payable beneficiary;\n    bytes pools;\n}\n\ninterface IParaswapV6 {\n    function swapExactAmountIn(\n        address executor,\n        GenericData calldata swapData,\n        uint256 partnerAndFee,\n        bytes calldata permit,\n        bytes calldata executorData\n    ) external payable returns (uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountOut(\n        address executor,\n        GenericData calldata swapData,\n        uint256 partnerAndFee,\n        bytes calldata permit,\n        bytes calldata executorData\n    )\n        external\n        payable\n        returns (uint256 spentAmount, uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountInOnBalancerV2(\n        BalancerV2Data calldata balancerData,\n        uint256 partnerAndFee,\n        bytes calldata permit,\n        bytes calldata data\n    ) external payable returns (uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountOutOnBalancerV2(\n        BalancerV2Data calldata balancerData,\n        uint256 partnerAndFee,\n        bytes calldata permit,\n        bytes calldata data\n    )\n        external\n        payable\n        returns (uint256 spentAmount, uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountInOnCurveV1(\n        CurveV1Data calldata curveV1Data,\n        uint256 partnerAndFee,\n        bytes calldata permit\n    ) external payable returns (uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountInOnCurveV2(\n        CurveV2Data calldata curveV2Data,\n        uint256 partnerAndFee,\n        bytes calldata permit\n    ) external payable returns (uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountInOnUniswapV2(\n        UniswapV2Data calldata uniData,\n        uint256 partnerAndFee,\n        bytes calldata permit\n    ) external payable returns (uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountOutOnUniswapV2(\n        UniswapV2Data calldata uniData,\n        uint256 partnerAndFee,\n        bytes calldata permit\n    )\n        external\n        payable\n        returns (uint256 spentAmount, uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountInOnUniswapV3(\n        UniswapV3Data calldata uniData,\n        uint256 partnerAndFee,\n        bytes calldata permit\n    ) external payable returns (uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n\n    function swapExactAmountOutOnUniswapV3(\n        UniswapV3Data calldata uniData,\n        uint256 partnerAndFee,\n        bytes calldata permit\n    )\n        external\n        payable\n        returns (uint256 spentAmount, uint256 receivedAmount, uint256 paraswapShare, uint256 partnerShare);\n}\n"
    },
    "contracts/interfaces/v0.8/external/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.26;\n\ninterface IUniswapV2Router {\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/v0.8/external/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.26;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/v0.8/IIssuanceModule.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.26;\n\nimport { IERC20 } from \"@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol\";\nimport { ISetToken } from \"./ISetToken.sol\";\n\ninterface IIssuanceModule {\n\n    event SetTokenIssued(\n        address indexed _setToken,\n        address indexed _issuer,\n        address indexed _to,\n        address _hookContract,\n        uint256 _quantity\n    );\n\n    event SetTokenRedeemed(\n        address indexed _setToken,\n        address indexed _redeemer,\n        address indexed _to,\n        uint256 _quantity\n    );\n\n    function issue(\n        ISetToken _setToken,\n        uint256 _quantity,\n        address _to\n    ) external;\n\n    function redeem(\n        ISetToken _setToken,\n        uint256 _quantity,\n        address _to\n    ) external;\n\n    function removeModule() external;\n\n    function getRequiredComponentUnitsForIssue(\n        ISetToken _setToken,\n        uint256 _quantity\n    ) external view returns (address[] memory, uint256[] memory);\n}\n"
    },
    "contracts/interfaces/v0.8/ISetToken.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.26;\n\n\nimport { IERC20 } from \"@openzeppelin-contracts-5/contracts/token/ERC20/IERC20.sol\";\n\n\ninterface ISetToken is IERC20 {\n\n    enum ModuleState {\n        NONE,\n        PENDING,\n        INITIALIZED\n    }\n\n    struct Position {\n        address component;\n        address module;\n        int256 unit;\n        uint8 positionState;\n        bytes data;\n    }\n\n    struct ComponentPosition {\n      int256 virtualUnit;\n      address[] externalPositionModules;\n      mapping(address => ExternalPosition) externalPositions;\n    }\n\n    struct ExternalPosition {\n      int256 virtualUnit;\n      bytes data;\n    }\n\n    function addComponent(address _component) external;\n    function removeComponent(address _component) external;\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n    function addExternalPositionModule(address _component, address _positionModule) external;\n    function removeExternalPositionModule(address _component, address _positionModule) external;\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n\n    function editPositionMultiplier(int256 _newMultiplier) external;\n\n    function mint(address _account, uint256 _quantity) external;\n    function burn(address _account, uint256 _quantity) external;\n\n    function lock() external;\n    function unlock() external;\n\n    function addModule(address _module) external;\n    function removeModule(address _module) external;\n    function initializeModule() external;\n\n    function setManager(address _manager) external;\n\n    function manager() external view returns (address);\n    function moduleStates(address _module) external view returns (ModuleState);\n    function getModules() external view returns (address[] memory);\n\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n    function getComponents() external view returns(address[] memory);\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n    function isComponent(address _component) external view returns(bool);\n\n    function positionMultiplier() external view returns (int256);\n    function getPositions() external view returns (Position[] memory);\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\n\n    function isInitializedModule(address _module) external view returns(bool);\n    function isPendingModule(address _module) external view returns(bool);\n    function isLocked() external view returns (bool);\n    function locker() external view returns (address);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}